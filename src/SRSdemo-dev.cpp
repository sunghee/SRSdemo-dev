//============================================================================
// Name        : SRSdemo1.cpp
// Author      : Sung Hee Park @ ETRI
// Version     :
// Copyright   : (C) Copyright 2014
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <GL/glu.h>
#include <GL/glut.h>
#include "rapidxml.hpp"

#include <fstream>
#include <vector>
#include <iostream>
#include <string.h>
#include <malloc.h>
#include <math.h>

using namespace std;

using namespace rapidxml;

#define window_width  1024
#define window_height 768

#define VESSEL		1
#define STOMACH		2
#define LIVER		3
#define INSTRUMENT1 4
#define INSTRUMENT2 5
#define STOMACH_MESH	6



#define BUFSIZE 512

char *objectNames[] =
{"Nothing", "Vessel", "Stomach", "Liver", "Instrument1", "Instrument2","stomach-mesh"};

static GLfloat theta[] = {0.0, 0.0, 0.0}; // Rotation (X,Y,Z)
static GLint axis = 2; // Changed by the Mouse Callback Routine

// YLP 01/05/2013 : add scaling and dynamics rotations speed
static int lastx = 0, lasty = 0;
static GLfloat rotate_speed = 0.5f;
static GLfloat  scaling = 1.0f;
static GLfloat  shift = 1.0f;

GLuint selectBuf[BUFSIZE];

int W = 1024, H = 768;
GLfloat x, y;
int locating = 0;
int theObject = 0;
int menu_inuse = 0;
int mouse_state = 0;

static xml_document<> doc;
static xml_node<> * root_node=NULL;
//vector<char> elements;
static char * elements=NULL; // char variables for elements
static char * elements2=NULL;

string str_elements; // string variables for elements
string str_elements2;

//int window_width = 640;
//int window_height = 480;

#define X .525731112119133606
#define Z .850650808352039932

static GLfloat vdata[12][3] = {
   {-X, 0.0, Z}, {X, 0.0, Z}, {-X, 0.0, -Z}, {X, 0.0, -Z},
   {0.0, Z, X}, {0.0, Z, -X}, {0.0, -Z, X}, {0.0, -Z, -X},
   {Z, X, 0.0}, {-Z, X, 0.0}, {Z, -X, 0.0}, {-Z, -X, 0.0}
};
static GLuint tindices[20][3] = {
   {0,4,1}, {0,9,4}, {9,5,4}, {4,5,8}, {4,8,1},
   /*{8,10,1},*/ {8,3,10}, {5,3,8}, {5,2,3}, {2,7,3},
   {7,10,3}, {7,6,10}, {7,11,6}, {11,0,6}, {0,1,6},
   {6,1,10},/* {9,0,11},*/ {9,11,2}, {9,2,5}, {7,2,11} };
int i;

static GLfloat vdata2[787*3] = {
-34.7744, 128.725, -69.7196, -35.0779, 128.544, -69.6101, -35.3662, 128.631, -69.232, -35.7043, 128.693, -68.8121, -39.8643, 119.775, -71.5577, -39.5928, 119.439, -71.7014, -39.6929, 118.98, -71.8799, -39.8948, 118.966, -71.8256, -39.8353, 118.646, -71.9375, -39.9978, 118.34, -71.9387,
-40.4929, 117.591, -71.7566, -40.7848, 117.336, -71.5376, -40.7261, 117.855, -71.4597, -39.8017, 118.317, -72.0374, -39.899, 117.462, -72.1555, -39.4536, 117.301, -72.3963, -39.6151, 116.05, -72.5114, -40.1673, 117.345, -72.0466, -40.1454, 117.834, -71.9562, -40.2633, 117.493, -71.9837,
-40.3337, 117.535, -71.9222, -40.3089, 117.335, -71.9823, -40.3466, 117.078, -71.9661, -40.4053, 117.344, -71.9039, -40.0086, 116.884, -72.1743, -40.5812, 117.111, -71.7756, -41.0118, 117.097, -71.3605, -40.8463, 116.863, -71.5775, -41.0964, 116.761, -71.3513, -41.3134, 116.411, -71.192,
-41.2856, 117.021, -71.0524, -41.5159, 116.032, -71.0494, -41.5806, 115.576, -71.0659, -41.5814, 113.915, -71.2086, -41.8652, 114.117, -70.9151, -41.3427, 116.077, -71.252, -41.5971, 115.04, -71.1134, -41.2817, 115.11, -71.4187, -41.3566, 114.738, -71.373, -40.9517, 114.821, -71.7091,
-41.2918, 114.276, -71.4565, -40.9422, 113.508, -71.7818, -41.6285, 114.455, -71.1312, -41.5489, 113.388, -71.2543, -41.2564, 113.678, -71.5125, -41.2001, 112.937, -71.5716, -41.4906, 112.206, -71.3335, -41.8063, 111.804, -71.0493, -41.8104, 112.25, -71.0373, -42.4801, 111.36, -70.3745,
-42.7672, 111.616, -70.0404, -42.422, 111.853, -70.4198, -42.3783, 112.263, -70.4502, -42.1077, 112.17, -70.7393, -42.6251, 112.274, -70.1637, -42.3392, 112.759, -70.4568, -42.1374, 113.327, -70.6583, -42.4571, 113.488, -70.277, -41.8615, 113.59, -70.9431, -41.8173, 112.827, -71.005,
-39.7072, 121.265, -71.6187, -42.1833, 113.977, -70.5811, -42.2205, 114.521, -70.5242, -42.0402, 114.654, -70.68, -42.3214, 114.91, -70.2901, -42.1221, 115.223, -70.4815, -42.0369, 115.762, -70.4595, -41.8621, 115.348, -70.7738, -41.7527, 115.843, -70.8022, -41.7314, 116.501, -70.6285,
-39.7483, 121.192, -71.5616, -39.5493, 121.666, -71.6854, -39.4649, 121.869, -71.732, -42.4598, 114.013, -70.2437, -42.3523, 114.252, -70.3762, -42.2429, 114.383, -70.5081, -42.2806, 114.476, -70.4653, -42.7729, 113.89, -69.823, -42.6168, 115.109, -69.8186, -42.486, 115.859, -69.8041,
-42.5067, 116.591, -69.5072, -42.5871, 116.859, -69.247, -43.1868, 115.471, -68.8273, -42.9702, 116.118, -68.9444, -42.8367, 115.594, -69.3476, -42.7063, 116.432, -69.2582, -42.7196, 116.054, -69.3858, -42.8482, 116.701, -68.8893, -42.6941, 117.159, -68.9065, -42.5465, 117.519, -68.9388,
-42.4393, 117.302, -69.2446, -41.7222, 118.6, -69.5766, -41.544, 118.619, -69.8934, -41.5171, 118.896, -69.7133, -41.8328, 118.821, -69.181, -41.5439, 118.996, -69.5602, -41.4806, 119.04, -69.6509, -41.4138, 119.112, -69.6999, -41.4275, 119.153, -69.6298, -41.8564, 119.288, -68.7122,
-41.2532, 119.462, -69.6082, -41.5001, 119.739, -68.8635, -42.5022, 114.463, -70.1334, -42.8097, 114.538, -69.666, -42.3142, 115.444, -70.1736, -42.2911, 114.574, -70.4191, -42.3405, 114.429, -70.3863, -34.6218, 122.118, -73.6569, -34.9333, 122.454, -73.3375, -35.4811, 122.737, -72.852,
-35.9666, 122.737, -72.4934, -36.1926, 123.032, -72.1883, -36.622, 122.867, -71.8888, -36.4008, 123.378, -71.8502, -36.5874, 123.761, -71.4858, -37.005, 123.603, -71.1536, -35.0417, 121.774, -73.5007, -35.5237, 121.985, -73.1018, -36.5697, 121.865, -72.3751, -36.0064, 122.224, -72.6646,
-36.9498, 122.256, -71.8777, -36.3858, 122.495, -72.2563, -36.992, 122.802, -71.5763, -36.8032, 123.25, -71.5361, -37.2034, 123.097, -71.2166, -37.6228, 122.929, -70.8672, -37.8472, 123.312, -70.4023, -37.4155, 123.453, -70.8012, -37.6038, 123.829, -70.3819, -37.7868, 124.191, -69.959,
-38.3228, 124.311, -69.2451, -38.1491, 124.05, -69.6135, -37.9723, 123.734, -70.0121, -38.1492, 123.386, -70.0096, -38.2008, 123.019, -70.1693, -37.9666, 122.839, -70.5435, -38.2387, 122.609, -70.3756, -37.9265, 122.337, -70.8806, -38.4492, 121.746, -70.7061, -38.196, 121.862, -70.8932,
-38.5763, 122.745, -69.8995, -38.4316, 123.235, -69.7643, -38.2966, 123.637, -69.6832, -38.5707, 123.505, -69.429, -39.2043, 123.299, -68.7661, -38.8022, 123.126, -69.3807, -38.8731, 122.746, -69.5422, -38.9692, 122.374, -69.6814, -38.5283, 122.119, -70.3667, -38.714, 121.558, -70.5601,
-38.4693, 120.404, -71.6032, -38.1535, 120.748, -71.6354, -37.8934, 120.35, -72.0582, -38.3636, 121.459, -70.988, -38.659, 121.143, -70.9222, -38.4025, 121.158, -71.1557, -38.4535, 120.878, -71.2998, -38.1377, 121.167, -71.3922, -37.9944, 121.61, -71.2533, -37.4174, 121.327, -71.9323,
-37.1644, 121.76, -71.9343, -36.9719, 121.499, -72.2193, -36.9146, 121.842, -72.1093, -37.786, 121.387, -71.5797, -36.8404, 120.712, -72.6571, -36.2725, 119.902, -73.322, -35.4635, 120.264, -73.7104, -37.8153, 120.962, -71.7929, -37.5049, 120.816, -72.1198, -37.2852, 120.46, -72.4459,
-36.855, 120.157, -72.8625, -35.8718, 119.493, -73.6835, -35.4126, 119.265, -73.9923, -34.7589, 118.511, -74.451, -35.2639, 118.394, -74.2488, -35.5581, 118.643, -74.0584, -35.6694, 118.093, -74.1168, -35.9578, 118.36, -73.9199, -35.9363, 118.873, -73.809, -36.4025, 118.399, -73.6763,
-37.0211, 118.549, -73.2999, -36.4067, 119.099, -73.486, -37.5018, 118.972, -72.8989, -36.9277, 119.401, -73.0853, -37.5023, 119.75, -72.5998, -38.5474, 118.766, -72.4104, -38.0039, 119.201, -72.5292, -39.2754, 119.787, -71.5385, -38.7554, 119.78, -71.8152, -38.8902, 120.167, -71.4689,
-38.9028, 120.674, -71.0575, -37.8687, 118.065, -72.9967, -37.5682, 118.399, -73.0538, -37.9794, 118.559, -72.7824, -39.0892, 118.172, -72.3618, -39.2504, 118.691, -72.136, -39.0007, 118.775, -72.2007, -39.1792, 118.999, -72.0411, -39.2818, 119.293, -71.8578, -38.9274, 119.261, -72.0126,
-38.0434, 119.738, -72.2679, -38.3713, 119.961, -71.9452, -38.6217, 120.074, -71.7146, -38.4424, 119.447, -72.1708, -37.3771, 122.549, -71.3256, -37.9202, 121.921, -71.1364, -37.5668, 121.89, -71.4964, -34.661, 119.658, -74.2802, -34.9652, 119.355, -74.1997, -35.4306, 119.849, -73.8409,
-35.7644, 119.991, -73.6098, -35.017, 119.768, -74.081, -34.5786, 120.162, -74.2053, -40.7823, 120.8, -68.7962, -40.3188, 120.289, -70.0798, -40.6035, 120.001, -70.1034, -40.1358, 120.159, -70.8433, -40.3414, 120.091, -70.5529, -40.2742, 120.205, -70.9753, -40.5413, 119.965, -70.4793,
-40.468, 120.012, -70.7496, -40.3183, 120.116, -70.7744, -40.8686, 119.995, -69.6106, -41.0451, 119.931, -69.3911, -41.1997, 119.926, -69.1453, -41.3382, 120.161, -68.6646, -40.85, 120.342, -69.2019, -40.5812, 120.241, -69.749, -39.6476, 121.406, -71.6471, -39.632, 121.439, -71.6454,
-39.9222, 120.498, -71.448, -39.9577, 120.658, -71.3767, -40.0039, 120.357, -71.2648, -39.9109, 120.153, -71.3813, -39.9489, 120.391, -71.5128, -40.0787, 120.511, -71.2687, -40.1118, 120.391, -71.181, -39.5495, 121.653, -71.6869, -39.4447, 121.909, -71.7445, -39.4325, 121.949, -71.7485,
-39.4342, 121.939, -71.7489, -39.4864, 121.81, -71.7217, -39.4536, 121.872, -71.7423, -39.459, 121.842, -71.7422, -39.3621, 122.049, -71.7967, -39.3346, 122.108, -71.8112, -39.377, 122.014, -71.7895, -39.3118, 122.15, -71.8249, -39.2734, 122.227, -71.8457, -39.2549, 122.263, -71.8559,
-39.1512, 122.747, -69.2022, -39.5396, 122.79, -68.6829, -39.4804, 121.793, -69.4999, -39.5687, 121.538, -69.6085, -39.1678, 121.748, -69.9108, -39.4425, 121.318, -69.9526, -39.1241, 121.155, -70.4459, -38.6305, 124.315, -68.8625, -38.5093, 123.916, -69.2542, -38.7794, 123.979, -68.8794,
-38.8181, 123.615, -69.0539, -39.5293, 122.158, -69.1589, -39.8612, 121.782, -69.0465, -39.6637, 121.743, -69.3206, -40.1814, 121.564, -68.8368, -34.6642, 121.697, -73.762, -35.2925, 120.7, -73.682, -34.9312, 121.199, -73.7471, -34.9613, 120.761, -73.8592, -34.5702, 120.822, -74.0497,
-35.0461, 120.33, -73.9259, -35.7774, 120.463, -73.4561, -35.5678, 121.197, -73.3461, -36.2962, 120.738, -73.0201, -36.1034, 121.536, -72.857, -36.6498, 121.222, -72.585, -37.1121, 121.002, -72.3341, -41.8388, 107.984, -70.8608, -42.0126, 108.459, -70.7459, -41.7387, 108.634, -71.0023,
-42.0884, 108.917, -70.7053, -42.0874, 110.359, -70.7716, -41.758, 109.981, -71.0636, -41.7524, 110.617, -71.0934, -42.1466, 111.444, -70.719, -42.031, 110.891, -70.8372, -42.3695, 110.831, -70.4971, -42.4289, 110.183, -70.4323, -42.5184, 109.711, -70.3327, -42.1616, 109.657, -70.6749,
-42.4771, 109.16, -70.3479, -43.2797, 108.95, -69.533, -43.4707, 109.274, -69.3282, -43.862, 109.367, -68.8867, -42.804, 109.544, -70.0344, -42.7045, 110.018, -70.1482, -43.1627, 109.424, -69.6562, -43.8004, 110.223, -68.9039, -43.4624, 109.829, -69.3194, -43.4188, 110.566, -69.3323,
-42.674, 111.061, -70.1701, -43.0231, 110.971, -69.7743, -43.4047, 111.295, -69.2982, -43.3685, 111.979, -69.277, -43.665, 112.406, -68.8311, -42.9999, 112.19, -69.7175, -43.1167, 111.609, -69.6266, -42.8154, 112.969, -69.8661, -43.1981, 113.493, -69.2885, -35.0994, 118.893, -74.2284,
-34.6291, 119.205, -74.3845, -43.7205, 111.685, -68.8584, -43.7593, 110.965, -68.8894, -39.4259, 118.988, -71.9571, -39.5448, 118.534, -72.0756, -39.6966, 117.96, -72.1546, -39.9147, 118.111, -72.0317, -42.9001, 108.832, -69.9136, -42.3732, 108.306, -70.3966, -42.9089, 108.027, -69.8702,
-43.2788, 108.421, -69.5219, -43.5755, 108.805, -69.2189, -43.6638, 108.181, -69.1239, -43.8865, 108.648, -68.8882, -42.7109, 110.53, -70.1384, -43.044, 110.125, -69.7772, -35.0647, 108.092, -74.9608, -35.3845, 108.311, -74.852, -34.9222, 108.663, -75.0517, -35.5166, 108.868, -74.8342,
-35.0495, 109.462, -75.0443, -35.6293, 109.437, -74.8212, -35.9934, 110.274, -74.7, -37.0521, 112.147, -74.2031, -35.9535, 108.25, -74.6099, -35.9616, 109.728, -74.6962, -36.6831, 109.086, -74.3477, -37.0796, 109.296, -74.1713, -37.4462, 108.383, -73.9285, -37.8283, 108.02, -73.6908,
-37.8547, 109.45, -73.7728, -37.4593, 108.981, -73.964, -36.5658, 109.803, -74.428, -36.9797, 110.603, -74.2473, -37.4211, 109.381, -74.0059, -37.2689, 109.804, -74.0923, -36.9975, 111.469, -74.2401, -37.4406, 112.287, -74.0155, -37.1263, 113.088, -74.127, -37.4795, 113.993, -73.8919,
-37.1165, 113.648, -74.095, -37.6793, 110.304, -73.8937, -37.5441, 111.063, -73.9745, -37.4979, 111.767, -73.9957, -38.0787, 110.795, -73.695, -38.5031, 110.697, -73.4586, -38.3982, 111.147, -73.5232, -37.9987, 111.45, -73.7397, -37.9226, 112.2, -73.7666, -38.4525, 112.511, -73.4674,
-37.9796, 112.921, -73.7095, -37.9691, 113.575, -73.6763, -37.9616, 114.182, -73.6334, -38.5186, 111.741, -73.4477, -38.432, 113.198, -73.4491, -38.3972, 113.851, -73.4264, -38.7998, 114.198, -73.1699, -38.3284, 114.459, -73.4121, -38.1693, 114.934, -73.4449, -38.6474, 114.967, -73.1775,
-38.1026, 115.55, -73.3917, -37.7782, 115.068, -73.6292, -39.3492, 112.479, -72.9334, -38.8996, 112.835, -73.1975, -38.8661, 113.509, -73.1824, -39.3353, 113.144, -72.918, -39.2284, 114.576, -72.8868, -39.1866, 115.312, -72.8382, -39.0651, 116.744, -72.7022, -39.305, 113.846, -72.8969,
-39.839, 113.443, -72.5796, -39.7332, 114.224, -72.6063, -39.6714, 114.932, -72.5909, -40.0163, 116.05, -72.2635, -39.6378, 115.608, -72.5464, -40.2014, 113.958, -72.3149, -40.1246, 114.608, -72.3274, -40.4667, 114.924, -72.0689, -40.5854, 115.578, -71.9302, -40.089, 115.28, -72.2959,
-40.5547, 114.348, -72.0433, -40.9402, 114.058, -71.763, -41.0876, 115.551, -71.5585, -40.574, 116.465, -71.8538, -41.1819, 116.078, -71.4233, -41.0704, 115.91, -71.5574, -41.1746, 115.831, -71.4711, -40.8709, 115.976, -71.7032, -41.0026, 116.123, -71.5877, -40.8659, 116.243, -71.6783,
-37.5387, 113.324, -73.9137, -37.5345, 112.734, -73.95, -37.0198, 115.627, -73.9213, -35.8903, 116.956, -74.2235, -36.4412, 116.301, -74.0902, -36.735, 116.038, -73.9962, -37.4855, 116.977, -73.4514, -36.8687, 117.727, -73.5967, -36.2376, 117.214, -74.0219, -36.2152, 117.808, -73.9101,
-36.3249, 116.705, -74.0745, -36.6255, 116.943, -73.8921, -36.7147, 116.492, -73.9314, -36.9823, 116.755, -73.7531, -36.909, 117.149, -73.7104, -36.573, 117.365, -73.8315, -37.0466, 108.729, -74.1553, -36.5663, 108.515, -74.3633, -37.0139, 108.122, -74.1234, -36.1304, 109.096, -74.5916,
-41.3307, 115.792, -71.3111, -40.9898, 116.419, -71.5322, -38.6885, 115.765, -73.0537, -37.6966, 116.148, -73.5033, -37.5124, 115.617, -73.6824, -37.1662, 116.232, -73.7537, -38.75, 116.358, -72.9345, -38.2021, 116.381, -73.2078, -38.1141, 117.021, -73.1323, -38.5561, 116.873, -72.9407,
-38.3657, 117.358, -72.9313, -38.3764, 117.976, -72.7604, -37.9477, 117.54, -73.095, -37.4619, 117.872, -73.2556, -35.786, 117.525, -74.17, -35.4672, 117.254, -74.3565, -35.2262, 117.845, -74.3615, -34.6889, 117.912, -74.5778, -36.0282, 116.346, -74.2604, -35.5832, 116.055, -74.4813,
-36.0639, 115.769, -74.3268, -35.7561, 115.495, -74.4826, -36.4215, 114.723, -74.2992, -36.7862, 113.93, -74.2222, -37.0471, 114.093, -74.0919, -36.7508, 114.69, -74.1651, -36.7392, 114.346, -74.2049, -36.7343, 115.141, -74.1172, -36.1967, 115.249, -74.3344, -36.3926, 115.94, -74.1662,
-36.4123, 115.548, -74.2106, -36.6613, 115.656, -74.0868, -37.2932, 115.097, -73.8628, -42.1349, 117.598, -69.5536, -42.2848, 116.971, -69.6583, -42.0823, 116.683, -70.0836, -41.6094, 117.94, -70.2249, -41.4152, 118.156, -70.4308, -41.2215, 118.597, -70.4946, -40.9225, 119.03, -70.772,
-41.0058, 118.552, -70.8793, -40.8328, 118.855, -71.0177, -40.7144, 119.18, -71.0577, -40.8264, 118.581, -71.1299, -41.2316, 118.131, -70.7246, -41.2578, 117.626, -70.8889, -41.5269, 117.247, -70.6526, -41.4866, 117.742, -70.5164, -40.3335, 117.424, -71.9587, -40.213, 120.329, -71.1483,
-40.3855, 120.105, -70.9499, -40.5795, 119.857, -70.8062, -40.7085, 119.649, -70.7625, -40.6762, 119.62, -70.8792, -40.6284, 119.746, -70.8631, -40.5332, 119.831, -70.9956, -40.6068, 119.635, -71.0114, -40.7264, 119.406, -70.9261, -40.3809, 120.09, -71.0586, -40.4949, 119.766, -71.1255,
-40.3941, 119.756, -71.2809, -40.3398, 120.054, -71.2066, -40.1243, 120.424, -71.3596, -40.0619, 120.451, -71.4511, -40.2193, 120.314, -71.229, -40.0309, 120.628, -71.3555, -34.7347, 124.662, -72.5657, -35.107, 124.779, -72.2375, -35.5215, 124.609, -72.0049, -35.37, 124.295, -72.2794,
-35.8354, 124.734, -71.6723, -36.3201, 124.381, -71.4141, -36.3154, 125.434, -70.8092, -36.7315, 125.133, -70.5751, -36.6587, 125.453, -70.4505, -36.9491, 125.412, -70.1568, -35.757, 125.179, -71.5006, -36.1148, 124.997, -71.2723, -36.1618, 126.018, -70.5776, -36.0921, 126.371, -70.4039,
-36.3957, 126.305, -70.1369, -36.7112, 126.641, -69.5384, -36.7216, 126.178, -69.8789, -36.9691, 127.068, -68.9203, -37.4415, 126.529, -68.7914, -37.138, 125.932, -69.5822, -37.5574, 126.002, -69.0546, -37.6738, 125.589, -69.2057, -37.3926, 125.255, -69.7539, -36.8156, 124.76, -70.7154,
-36.5015, 124.871, -70.9694, -36.693, 124.509, -70.9858, -36.8056, 124.105, -71.0895, -37.0088, 124.42, -70.7041, -37.2063, 123.956, -70.7505, -37.1287, 124.859, -70.3085, -37.8531, 125.03, -69.3628, -37.3899, 124.326, -70.3355, -37.5947, 124.696, -69.8762, -38.0052, 124.508, -69.5087,
-38.3168, 124.762, -68.9742, -38.1213, 125.354, -68.8338, -41.3824, 115.412, -71.3013, -36.6241, 125.822, -70.2339, -40.8085, 119.758, -70.1857, -40.8272, 119.415, -70.7016, -40.6937, 119.792, -70.5021, -40.81, 119.579, -70.5527, -40.9351, 119.557, -70.2313, -41.3664, 119.005, -69.8962,
-41.7809, 118.091, -69.8367, -41.4931, 118.361, -70.175, -41.3489, 118.754, -70.1543, -34.5793, 125.159, -72.4143, -35.4569, 125.017, -71.8408, -35.4455, 125.483, -71.5846, -35.9393, 125.373, -71.2202, -35.7295, 125.457, -71.3634, -35.2728, 125.931, -71.4519, -35.0603, 125.695, -71.7691,
-34.8379, 126.06, -71.7151, -34.6733, 125.685, -72.06, -35.0566, 125.305, -71.993, -39.22, 116.046, -72.7305, -39.5676, 116.509, -72.4718, -38.8208, 117.4, -72.6903, -35.4414, 126.198, -71.1348, -35.3269, 126.538, -71.0001, -35.757, 126.371, -70.7241, -35.8934, 127.285, -69.9063,
-35.4944, 127.571, -70.0646, -35.4773, 128.022, -69.7003, -35.7483, 128.264, -69.2, -35.0696, 126.351, -71.3449, -35.4498, 126.885, -70.6379, -35.1069, 127.181, -70.7286, -35.3464, 127.275, -70.4455, -35.0105, 127.559, -70.5176, -35.0948, 127.968, -70.1072, -35.3722, 128.347, -69.5134,
-35.1678, 128.256, -69.7958, -34.7939, 128.383, -70.0193, -35.7616, 125.786, -71.1158, -34.8973, 126.87, -71.1236, -34.8106, 127.301, -70.8865, -36.1839, 128.01, -68.9801, -35.9575, 127.705, -69.486, -36.5639, 127.569, -68.956, -36.6428, 127.12, -69.2477, -36.0364, 126.779, -70.1499,
-36.3059, 127.187, -69.5533, -35.6487, 127.162, -70.2471, -40.6104, 113.734, -72.0331, -40.6765, 113.142, -71.9965, -40.2723, 110.874, -72.3029, -40.6367, 110.44, -72.0164, -40.5752, 109.751, -72.0305, -40.3328, 111.537, -72.2684, -39.8029, 110.69, -72.6291, -39.6433, 109.93, -72.709,
-40.18, 110.191, -72.345, -40.1215, 109.472, -72.3499, -40.1048, 108.778, -72.3157, -39.4492, 111.312, -72.8775, -39.2977, 110.561, -72.9639, -39.1649, 110.013, -73.0333, -38.8012, 109.759, -73.2483, -38.8081, 109.138, -73.2068, -38.4302, 109.471, -73.4534, -37.8756, 108.658, -73.7162,
-38.83, 110.367, -73.2548, -38.3164, 110.119, -73.5453, -39.0235, 111.644, -73.1518, -38.9332, 112.187, -73.1989, -38.8652, 111.065, -73.2454, -40.736, 112.505, -71.96, -41.0905, 112.255, -71.6809, -41.1997, 111.828, -71.5949, -41.4756, 111.552, -71.3557, -41.4341, 110.95, -71.385,
-41.4004, 110.318, -71.3934, -41.3524, 108.941, -71.3554, -40.9001, 108.538, -71.6956, -41.1166, 111.323, -71.6605, -40.8014, 111.811, -71.9158, -40.707, 111.111, -71.9822, -41.0543, 110.693, -71.6964, -41.0043, 110.027, -71.7091, -40.959, 109.325, -71.7049, -40.5237, 109.056, -72.027,
-40.1382, 108.123, -72.2364, -40.4562, 108.482, -72.0363, -39.6752, 109.135, -72.6414, -39.6884, 108.406, -72.5744, -39.2268, 109.457, -72.9629, -38.7774, 108.47, -73.1721, -39.2385, 108.778, -72.9063, -39.2273, 108.071, -72.8499, -38.3444, 108.899, -73.4661, -40.3153, 113.407, -72.2585,
-40.2239, 112.772, -72.3359, -40.3933, 112.128, -72.2236, -39.724, 112.77, -72.6813, -39.3256, 111.927, -72.96, -40.5585, 121.212, -68.6833, -40.1937, 121.209, -69.1478, -40.0964, 120.982, -69.4997, -40.4563, 120.852, -69.1788, -39.9067, 120.874, -69.8469, -39.8218, 120.656, -70.1916,
-39.4117, 120.691, -70.5812, -39.58, 120.978, -70.117, -39.7802, 121.19, -69.6743, -39.9883, 121.207, -69.4027, -41.3717, 108.215, -71.2833, -41.7491, 109.295, -71.0355, -41.3745, 109.647, -71.382, -41.7787, 111.208, -71.0786, -39.7492, 119.94, -71.3371, -40.0997, 120.202, -70.5553,
-40.0461, 120.424, -70.2382, -40.2596, 120.581, -69.7486, -39.7299, 120.399, -70.6081, -39.3157, 120.305, -71.0495, -39.684, 120.125, -71.016, -40.1383, 120.238, -71.0335, -39.9305, 120.12, -70.9829, -39.9791, 120.165, -71.1444, -42.2582, 115.809, -70.1548, -42.1659, 116.172, -70.1602,
-42.5623, 116.271, -69.5549, -42.3555, 116.424, -69.7991, -34.4739, 115.412, -74.9755, -34.9645, 114.698, -74.868, -35.1479, 115.58, -74.7052, -35.6106, 114.009, -74.6876, -34.9617, 113.838, -74.9514, -35.4913, 113.237, -74.7999, -35.3342, 112.473, -74.9184, -34.8753, 113.133, -75.0444,
-34.6569, 112.54, -75.1692, -36.313, 114.095, -74.4022, -35.7759, 114.834, -74.5442, -36.6744, 112.756, -74.3452, -36.136, 113.363, -74.5322, -36.6963, 113.478, -74.2924, -37.1705, 112.6, -74.1337, -36.0058, 112.615, -74.6363, -36.5013, 112.012, -74.4543, -35.8698, 111.862, -74.7365,
-35.0103, 112.034, -75.0735, -34.8343, 111.618, -75.152, -34.6748, 111.118, -75.2111, -36.3778, 111.236, -74.5309, -35.8902, 111.309, -74.7523, -35.983, 110.857, -74.7152, -35.6483, 111.102, -74.8582, -35.2267, 111.179, -75.0181, -35.0713, 110.609, -75.0712, -35.5695, 110.675, -74.8846,
-35.4621, 110.041, -74.9104, -36.3855, 110.553, -74.5302, -34.9235, 110.112, -75.115, -41.0116, 117.506, -71.2422, -40.9627, 118.104, -71.1085, -40.4328, 118.127, -71.6736, -40.2058, 118.393, -71.7991, -40.3592, 118.621, -71.626, -40.2099, 119.001, -71.6563, -40.2128, 118.69, -71.7321,
-40.1187, 119.349, -71.6376, -39.8469, 119.308, -71.7296, -39.9965, 119.524, -71.6396, -39.9415, 120.151, -71.5051, -39.9963, 120.164, -71.5324, -39.9856, 120.54, -71.5047, -40.0013, 120.351, -71.5202, -40.0835, 120.005, -71.5304, -40.0003, 119.885, -71.5638, -40.1085, 119.657, -71.5782,
-40.1976, 119.75, -71.5064, -40.159, 119.973, -71.4919, -40.1076, 120.203, -71.4768, -40.2381, 119.9, -71.4303, -40.213, 120.14, -71.3721, -40.2378, 119.394, -71.5494, -40.3409, 119.535, -71.4203, -40.4295, 119.041, -71.4543, -40.666, 118.912, -71.2248, -40.6346, 118.465, -71.3898,
-34.4611, 116.142, -74.8977, -35.4869, 116.713, -74.43, -35.0028, 116.439, -74.6577, -34.9378, 117.244, -74.5744, -39.7395, 121.166, -71.5972, -39.8814, 120.748, -71.5318, -39.7744, 121.095, -71.5837, -39.8754, 120.895, -71.5196, -39.6809, 121.338, -71.6297, -34.8896, 123.13, -73.1148,
-35.1281, 123.984, -72.6021, -34.7803, 123.733, -72.9488, -35.011, 124.398, -72.5011, -34.7032, 124.263, -72.7741, -35.2772, 123.429, -72.7268, -35.7589, 123.205, -72.4614, -35.9088, 123.84, -72.0658, -35.6134, 123.783, -72.3254, -35.8237, 124.214, -71.9497, -39.3484, 122.075, -71.8045,
-39.2915, 122.191, -71.8355, -39.2798, 122.215, -71.8419, -39.262, 122.249, -71.8518, -39.2529, 122.267, -71.8569, -39.4989, 121.75, -71.7234, -39.6042, 121.529, -71.6612, -39.4353, 121.909, -71.7535, -39.474, 121.845, -71.7281, -39.426, 121.967, -71.7511, -39.4249, 121.969, -71.752,
-39.4397, 121.933, -71.7445, -39.4333, 121.948, -71.7479, -35.3984, 111.901, -74.9332, -35.208, 111.644, -75.0191, -35.5454, 111.498, -74.8918, -39.9475, 122.425, -70.5012, -42.0804, 114.605, -72.634, -35.3001, 129.015, -68.8764, -34.6497, 129.466, -69.0295, -34.9664, 128.903, -69.3467,
-34.5988, 127.999, -70.5106, -34.6207, 126.497, -71.5998, -39.2769, 122.219, -71.8439, -39.2627, 122.247, -71.8518, -36.0109, 123.514, -72.1281, -36.1776, 123.848, -71.8241, -39.2552, 122.263, -71.8556, -39.3161, 122.144, -71.8218, -39.3162, 122.139, -71.8229, -39.2771, 122.218, -71.844,
-39.3598, 122.048, -71.7992, -39.2981, 122.176, -71.8326, -39.386, 122.005, -71.7822, -39.8115, 120.962, -71.531, -39.8892, 121.458, -69.2905, -40.5257, 119.329, -71.2642, -40.5816, 119.519, -71.115, -40.0584, 118.742, -71.8113, -40.0242, 119.15, -71.7251, -41.0906, 119.178, -70.3031,
-42.0803, 118.171, -69.2695, -42.2066, 118.438, -68.8521, -42.346, 117.707, -69.1488, -42.4959, 117.946, -68.7288, -41.8368, 117.347, -70.1485, -37.6002, 114.588, -73.7757, -37.9713, 114.643, -73.5847, -37.0955, 114.561, -74.0205, -43.1258, 114.272, -69.2503, -43.3772, 114.775, -68.7447,
-42.9987, 114.959, -69.2802, -43.5622, 113.982, -68.6718, -43.2793, 112.697, -69.3001, -43.601, 113.152, -68.7911, -39.8479, 112.024, -72.6088, -39.9459, 111.285, -72.543, -38.2903, 108.22, -73.4431
};

static GLfloat vnormal[787*3] = {
-0.653697, 0.692525, -0.667149, -0.644305, 0.682576, -0.657564, -0.483497, 0.486384, -0.480571, -0.585732, 0.561488, -0.55453, -0.0438852, 0.207301, -0.567626, -0.102139, 0.482476, -1.3211, -0.0563549, 0.229575, -0.55874, -0.354857, 0.20898, -0.786295, -0.610463, 0.329378, -1.32975, -0.553523, 0.202266, -0.90156,
-0.594428, 0.190916, -0.802462, -0.66844, 0.178182, -0.683468, -0.63567, 0.169447, -0.649962, -0.521324, 0.281149, -1.10126, -0.452155, 0.1854, -0.905063, -0.407051, 0.103933, -0.822395, -0.841095, 0.20447, -1.36121, -0.533712, 0.222749, -1.07561, -0.1564, 0.0725086, -0.228549, -0.743654, 0.344766, -1.08671,
-0.816287, 0.378439, -1.19285, -0.936131, 0.0643156, -1.15846, -0.289201, 0.0198692, -0.357887, -0.662699, 0.0464756, -0.824136, -0.567642, 0.0985584, -0.872533, -0.653424, 0.0855995, -0.767265, -0.996816, 0.21312, -0.990052, -0.708672, 0.158961, -0.711892, -0.835043, 0.191245, -0.694912, -0.585056, 0.139108, -0.491326,
-0.589326, 0.140123, -0.494912, -1.01919, 0.241901, -0.791371, -0.825711, 0.0897293, -0.725706, -0.668859, 0.0381211, -0.672979, -0.896413, 0.0510904, -0.901935, -1.21694, 0.157235, -1.00541, -0.606791, 0.0464747, -0.616211, -0.831643, 0.0636964, -0.844555, -0.762655, 0.0584125, -0.774495, -0.458852, 0.0318718, -0.549035,
-0.663066, 0.0342586, -0.784992, -0.805153, -0.00193236, -0.993126, -0.621243, 0.0527259, -0.636873, -0.697639, 0.0232465, -0.764222, -0.693926, 0.00915928, -0.775839, -0.604013, -0.00373403, -0.658672, -0.756361, 0.0343974, -0.817221, -0.568451, 0.0113379, -0.615415, -0.980505, 0.0195564, -1.06151, -0.889851, 0.0323208, -0.789443,
-0.717594, 0.0260642, -0.636623, -1.00993, 0.0520065, -0.8864, -1.11594, 0.0475275, -0.963106, -0.600638, 0.0259738, -0.592266, -0.891737, 0.0750852, -0.745571, -0.874852, 0.0736635, -0.731454, -1.07609, 0.0541309, -0.92509, -0.903849, 0.0275673, -0.769462, -0.785049, 0.0150883, -0.746594, -0.655446, 0.0120257, -0.622515,
-0.0428365, 0.00748763, -0.0527155, -0.319316, 0.0162256, -0.350957, -1.50718, 0.0457305, -1.70517, -0.223212, 0.0798188, -0.19018, -0.547096, 0.136573, -0.484244, -0.818971, 0.11437, -0.665745, -0.650153, 0.122925, -0.493866, -0.686685, 0.120729, -0.540932, -0.942266, 0.165664, -0.742264, -0.456223, 0.107912, -0.352839,
-0.174672, 0.0666881, -0.0570116, -0.0694862, 0.0250677, -0.0157146, -0.0560972, 0.0162814, -0.0306747, -1.10742, 0.0522235, -0.913099, -1.12138, 0.00220677, -0.927851, -0.883075, 0.00173781, -0.730671, -1.31862, -0.0584379, -1.03452, -0.846716, 0.0682207, -0.622902, -0.792212, 0.126904, -0.526574, -0.870139, 0.162849, -0.573942,
-0.930928, 0.249265, -0.587064, -0.8413, 0.275195, -0.543405, -0.849862, 0.160129, -0.533995, -0.812267, 0.180743, -0.503825, -0.725596, 0.148712, -0.433502, -0.974293, 0.232381, -0.586825, -0.993066, 0.236859, -0.598132, -0.825592, 0.217785, -0.476377, -0.860255, 0.270346, -0.508513, -0.998784, 0.355459, -0.602362,
-0.818107, 0.309068, -0.509872, -1.05587, 0.41262, -0.569168, -1.02603, 0.400958, -0.553082, -1.28934, 0.588065, -0.711908, -0.747354, 0.353316, -0.406328, -0.831504, 0.393099, -0.452079, -1.68634, 0.869862, -1.02084, -0.465767, 0.240256, -0.281957, -0.812372, 0.461824, -0.428914, -0.839261, 0.43916, -0.479718,
-0.438077, 0.264375, -0.243579, -1.33314, 0.804535, -0.74125, -0.897298, 0.0957901, -0.605698, -1.07952, 0.167696, -0.737118, -0.902281, 0.149232, -0.628275, -1.25395, 0.211141, -0.844508, -1.49114, 0.283737, -0.991565, -0.71684, 0.377328, -1.09607, -0.471391, 0.248129, -0.720769, -0.447185, 0.23674, -0.605439,
-0.72501, 0.361048, -0.913342, -0.678044, 0.352292, -0.778047, -0.636327, 0.326976, -0.68198, -0.685714, 0.352353, -0.734911, -0.631011, 0.332713, -0.672832, -0.691429, 0.36067, -0.697639, -0.641964, 0.330631, -0.950584, -0.597038, 0.307493, -0.884061, -0.590754, 0.300529, -0.776794, -0.597895, 0.319246, -0.767478,
-0.586481, 0.300204, -0.684162, -0.691468, 0.353944, -0.806634, -0.747815, 0.382756, -0.753399, -0.691347, 0.353854, -0.696509, -0.694564, 0.358099, -0.66154, -0.734592, 0.378737, -0.699665, -0.654673, 0.333389, -0.590647, -0.691012, 0.349943, -0.624122, -0.64635, 0.327424, -0.559967, -0.714789, 0.362094, -0.61926,
-0.877006, 0.430643, -0.718593, -0.704899, 0.351539, -0.591355, -0.64483, 0.321582, -0.540962, -0.864715, 0.434351, -0.724511, -0.602271, 0.323695, -0.532645, -0.764428, 0.410847, -0.676054, -0.816326, 0.43874, -0.721953, -0.437431, 0.229755, -0.394182, -1.18561, 0.772632, -1.12544, -0.704305, 0.451294, -0.673326,
-0.583255, 0.30601, -0.500993, -0.989048, 0.515328, -0.809105, -0.83202, 0.416743, -0.680758, -1.01768, 0.516758, -0.822755, -0.640609, 0.319339, -0.509006, -0.519735, 0.280791, -0.432514, -1.25103, 0.675879, -1.04109, -0.643484, 0.366628, -0.535549, -0.752416, 0.478627, -0.665928, -0.861627, 0.548099, -0.762586,
-0.526058, 0.423562, -0.63432, -0.760559, 0.506617, -0.944794, -0.386569, 0.257498, -0.480211, -0.72643, 0.529694, -0.717406, -0.548489, 0.392524, -0.577307, -1.05998, 0.76695, -1.11514, -0.461014, 0.333567, -0.485003, -0.624149, 0.448141, -0.731525, -0.768306, 0.495352, -0.78725, -0.612767, 0.354944, -0.668456,
-0.596395, 0.323967, -0.69952, -0.518528, 0.294239, -0.647386, -0.919595, 0.521825, -1.14812, -0.719544, 0.466791, -0.83162, -0.680033, 0.380096, -0.978675, -0.36285, 0.180437, -0.584792, -0.614994, 0.309, -1.00092, -0.619212, 0.414058, -0.772884, -0.756721, 0.492411, -1.04738, -0.629518, 0.3958, -0.937932,
-0.589942, 0.331314, -0.93173, -0.542395, 0.258287, -0.997265, -0.482008, 0.229531, -0.886237, -0.392875, 0.165712, -0.885354, -0.654356, 0.259716, -1.48403, -0.454467, 0.193376, -0.955128, -0.450219, 0.188222, -0.914676, -0.459772, 0.212322, -0.893001, -0.563775, 0.271467, -1.011, -0.571594, 0.282562, -1.05199,
-0.437769, 0.216407, -0.805689, -0.579221, 0.312515, -0.988647, -0.594395, 0.333154, -1.06398, -0.448219, 0.251223, -0.802322, -0.39952, 0.273462, -0.711973, -0.444941, 0.32153, -0.858286, -0.537308, 0.414162, -0.941678, -0.34355, 0.362911, -0.654805, -0.617109, 0.651888, -1.17621, -0.450732, 0.614883, -0.862606,
-0.522538, 0.569138, -0.717402, -0.547781, 0.306601, -1.08925, -0.546919, 0.318301, -1.01629, -0.609504, 0.372109, -1.1377, -0.265554, 0.194567, -0.582388, -0.494993, 0.432887, -1.34838, -0.395202, 0.345617, -1.07655, -0.291659, 0.295894, -0.741484, -0.42454, 0.68298, -1.48175, -0.333077, 0.412314, -0.847773,
-0.744989, 0.591438, -1.19317, -0.702442, 0.584552, -0.958482, -0.830721, 0.824534, -1.3061, -0.366048, 0.326076, -0.627552, -0.664687, 0.355723, -0.65115, -1.28855, 0.80069, -1.33387, -0.405597, 0.254684, -0.420091, -0.454814, 0.209882, -0.928737, -0.437312, 0.201805, -0.892997, -0.494333, 0.233513, -0.857517,
-0.648528, 0.306352, -1.125, -0.563895, 0.26339, -1.06021, -0.460188, 0.226209, -0.906027, -0.816815, 0.658022, -0.606558, -0.74379, 0.704106, -0.48781, -0.135635, 0.294908, -0.0200378, -0.337431, 0.733295, -0.0672079, -0.10044, 0.499891, 0.0459325, -0.119523, 2.03973, 0.877401, -1.1142, 1.57197, -0.334923,
-1.15373, 1.65478, -0.0251193, -1.10347, 1.71145, 0.515996, -0.731476, 0.525853, -0.434846, -1.04155, 0.77582, -0.611285, -1.06038, 0.796827, -0.695058, -0.577732, 0.434138, -0.378691, -0.486929, 0.393429, -0.311869, -0.717148, 0.579441, -0.459319, 2.51081, -1.14189, -0.867837, 0.190684, -0.0867214, -0.0659082,
2.23622, -0.433713, -0.205183, 0.76666, 0.0132151, 0.352074, 0.523308, 0.00902041, 0.240319, 0.878252, 0.263608, 0.239478, 2.30678, 0.0385372, -1.01402, -0.00371872, 0.161053, 0.215034, 0.00125085, 0.127553, 0.175007, 0.316164, -0.0465835, 0.363051, 2.08475, -0.439564, 1.9635, 0.0923594, -0.0194738, 0.0869878,
0.135382, -0.0283739, 0.131688, 1.96688, -0.289236, 2.26111, 0.0600565, -0.00883151, 0.0690405, 1.91467, -0.337975, 1.97809, 0.0492259, -0.00833694, 0.0558617, 2.03494, -0.354633, 2.34741, 0.0433128, -0.0096567, 0.0426748, 0.0144121, -0.00321322, 0.0141998, 0.013316, -0.00344891, 0.0118127, -1.24315, 1.26696, 2.5768,
-0.492383, 0.278206, -0.403561, -0.710846, 0.414703, -0.566001, -0.980912, 0.685336, -0.811677, -0.533941, 0.37305, -0.441821, -0.560363, 0.403007, -0.463174, -0.735167, 0.626905, -0.681662, -0.424679, 0.36214, -0.393771, -0.692584, 0.334847, -0.555389, -0.508174, 0.245689, -0.407509, -1.09243, 0.528164, -0.876031,
-0.804638, 0.39539, -0.646316, -0.488574, 0.312735, -0.396531, -0.754056, 0.482669, -0.611999, -0.833686, 0.587356, -0.68427, -0.554981, 0.417885, -0.455069, -0.678408, 0.331475, -1.07778, -0.645954, 0.334133, -1.0238, -0.323698, 0.162751, -0.548984, -0.821117, 0.412847, -1.39259, -0.304195, 0.149116, -0.576775,
-0.472629, 0.240214, -0.841861, -0.699348, 0.358286, -1.05815, -0.541478, 0.29361, -0.796471, -0.506314, 0.274542, -0.744747, -0.554459, 0.292571, -0.776046, -0.551516, 0.319762, -0.803901, -0.598439, 0.337675, -0.806571, -0.438014, -0.0404104, -0.495502, -0.877023, -0.0585494, -0.976867, -0.695073, -0.0496684, -0.771091,
-0.673536, -0.0364717, -0.733853, -0.702072, -0.0296115, -0.75366, -0.612451, -0.0254372, -0.657965, -0.777557, -0.0192809, -0.824907, -0.59214, 0.00662888, -0.610159, -0.909782, -0.0155405, -0.908258, -0.583363, -0.00552801, -0.590015, -0.608208, -0.0178935, -0.631346, -0.973829, -0.0286501, -1.01088, -0.652401, -0.0302673, -0.675472,
-0.847878, -0.0294481, -0.848052, -0.771012, 0.0024222, -0.722898, -0.860705, 0.00270398, -0.806994, -0.502301, 0.0180819, -0.46379, -0.630158, -0.0145185, -0.611459, -0.728137, -0.0167759, -0.706531, -0.773356, 0.0229206, -0.715726, -0.891505, 0.0393891, -0.762578, -0.802805, 0.0350439, -0.711051, -0.941379, 0.0260591, -0.818885,
-0.985331, 0.0168164, -0.86526, -0.627465, 0.0289334, -0.522613, -0.854074, 0.0393827, -0.711355, -0.676152, 0.0526077, -0.542675, -0.720922, 0.0764143, -0.552553, -0.897014, 0.0886538, -0.708134, -1.003, 0.0692807, -0.845981, -0.730174, 0.0647093, -0.567369, -0.767571, 0.0868628, -0.587374, -0.451919, 0.186799, -0.893825,
-0.392739, 0.16687, -0.849729, -0.73733, 0.0650089, -0.587085, -0.743984, 0.0533287, -0.620012, -0.270589, 0.247311, -0.676006, -0.324537, 0.296618, -0.810783, -0.246153, 0.118897, -0.582896, -0.632667, 0.305592, -1.49817, -0.790686, -0.0501244, -0.807964, -0.685717, -0.0310085, -0.714272, -0.809713, -0.0366157, -0.843431,
-0.614804, -0.0133252, -0.585144, -0.767886, -0.0166431, -0.730841, -0.686467, -0.00436088, -0.66668, -0.944298, -0.00170031, -0.888845, -0.605921, 0.00363933, -0.58568, -0.662749, 0.00334551, -0.60744, -0.456379, -0.0754617, -1.18952, -0.424659, -0.0702168, -1.10684, -0.242334, -0.0400696, -0.631627, -0.321401, -0.0444594, -0.840254,
-0.346334, -0.0376803, -0.904292, -0.446765, -0.0384971, -1.09807, -0.401116, -0.0295915, -0.895367, -0.516789, 0.020824, -1.14435, -0.309345, -0.0497329, -0.739587, -0.460053, -0.0574171, -1.08935, -0.548708, -0.0497163, -1.24548, -0.494129, -0.0384251, -1.06493, -0.575104, -0.0845813, -1.05367, -0.447249, -0.0657774, -0.81942,
-0.325474, -0.0313639, -0.596139, -0.423427, -0.040803, -0.77555, -0.312182, -0.0146544, -0.6538, -0.388949, -0.0172375, -0.814574, -0.865548, -0.0164428, -1.60516, -0.504633, -0.0131936, -1.00958, -0.437868, -0.00148832, -0.903418, -0.439629, 0.0395341, -0.899953, -0.357473, 0.0425271, -0.739346, -0.411637, 0.0639352, -0.844309,
-0.572823, 0.0889705, -1.17492, -0.510546, -0.0295358, -0.949301, -0.454585, 0.00318014, -0.885357, -0.450153, 0.00314913, -0.876725, -0.471829, -0.0238632, -0.856962, -0.535101, -0.0139985, -0.966464, -0.589173, 0.0159323, -1.06489, -0.504509, 0.0136428, -0.911866, -0.473029, 0.0315456, -0.870544, -0.539415, 0.0359728, -0.992718,
-0.551347, 0.0431954, -1.0038, -0.449538, 0.0495411, -0.833674, -0.433746, 0.0770033, -0.815312, -0.454495, 0.0187792, -0.791027, -0.475302, 0.0363218, -0.830969, -0.47638, 0.0545492, -0.839025, -0.532351, 0.0825152, -0.9472, -0.678286, 0.122684, -1.18795, -0.632647, 0.132668, -1.14751, -0.406918, 0.108045, -0.74088,
-0.3469, 0.0921087, -0.631605, -0.543962, 0.149219, -1.04582, -0.506257, 0.029621, -0.821919, -0.596438, 0.0348975, -0.96833, -0.487536, 0.042305, -0.806759, -0.494175, 0.0457911, -0.813726, -0.495976, 0.0859883, -0.875628, -0.465123, 0.104387, -0.85564, -0.47098, 0.191753, -0.901463, -0.523215, 0.0472493, -0.820537,
-0.461095, 0.0375629, -0.728294, -0.512732, 0.0622775, -0.805299, -0.517031, 0.080092, -0.826396, -0.462858, 0.074669, -0.735922, -0.427383, 0.0767224, -0.691668, -0.548032, 0.0496761, -0.784195, -0.631101, 0.0562327, -0.903951, -0.738854, 0.0901439, -1.08801, -0.482335, 0.0620343, -0.70527, -0.63799, 0.0820534, -0.932868,
-0.572653, 0.0395466, -0.746675, -0.555902, 0.0262994, -0.710331, -0.803531, 0.0732771, -1.08033, -0.307962, 0.101647, -0.383634, -0.572851, 0.134987, -0.587823, -0.657518, 0.0338376, -0.762877, -1.10014, 0.056616, -1.27642, -0.498164, 0.0707037, -0.658027, -0.803226, 0.114001, -1.06098, -0.587939, 0.0834454, -0.776612,
-0.417546, 0.0468141, -0.809182, -0.541202, 0.0606781, -1.04882, -0.4532, 0.126296, -0.973804, -0.349262, 0.127573, -0.803806, -0.529026, 0.185566, -1.13428, -0.365865, 0.128334, -0.784447, -0.285195, 0.113664, -0.559315, -0.317561, 0.142565, -0.612163, -0.482885, 0.209586, -1.01686, -0.419004, 0.18367, -0.891952,
-0.352749, 0.131293, -0.765415, -0.391252, 0.166624, -0.821368, -0.436233, 0.164467, -0.89732, -0.500285, 0.188616, -1.02908, -0.492768, 0.199497, -0.995062, -0.420919, 0.175204, -0.855411, -0.4882, -0.0811546, -1.04383, -0.443591, -0.0737392, -0.948447, -0.395874, -0.0658071, -0.846424, -0.343249, -0.0489158, -0.779852,
-0.54015, 0.0822926, -0.506556, -0.757443, 0.14322, -0.717114, -0.547826, 0.168241, -1.05664, -0.567628, 0.187432, -1.1395, -0.455426, 0.148225, -0.93287, -0.359381, 0.116966, -0.736137, -0.63863, 0.187946, -1.26449, -0.380679, 0.112032, -0.753743, -0.525266, 0.197194, -1.05937, -0.418539, 0.18032, -0.826209,
-0.577399, 0.304187, -1.13614, -0.324447, 0.170926, -0.63841, -0.411993, 0.212931, -0.80607, -0.577673, 0.259111, -1.11476, -0.455136, 0.176832, -1.03495, -0.459677, 0.177922, -1.12495, -0.327268, 0.125615, -0.774064, -0.578261, 0.221953, -1.36772, -0.309014, 0.11452, -0.738437, -0.282946, 0.0890177, -0.715541,
-0.436763, 0.13741, -1.10453, -0.432095, 0.126067, -1.07536, -0.55519, 0.134062, -1.40227, -0.442049, 0.0946527, -1.07534, -0.438258, 0.102021, -0.965744, -0.544487, 0.119484, -1.19136, -0.413269, 0.0906894, -0.904249, -0.409819, 0.110967, -0.959203, -0.386998, 0.104788, -0.905792, -0.307006, 0.0947308, -0.700115,
-0.509289, 0.139863, -1.14633, -0.525559, 0.144331, -1.18296, -0.422038, 0.106881, -0.862973, -0.765878, 0.266473, -0.499223, -0.713434, 0.248226, -0.465038, -1.02312, 0.310136, -0.697164, -1.3823, 0.429849, -0.777868, -0.80048, 0.241729, -0.501416, -0.56464, 0.194564, -0.369404, -0.678972, 0.209273, -0.405175,
-0.572783, 0.174686, -0.333529, -1.0353, 0.304003, -0.594489, -1.21644, 0.326509, -0.87601, -1.03508, 0.263888, -0.710459, -1.01783, 0.291428, -0.733443, -0.86014, 0.24092, -0.603344, -0.722052, 0.197766, -0.505089, -0.905147, 0.247915, -0.633167, -0.856741, 0.231555, -1.76653, -0.26331, 0.171885, -0.0348733,
-1.55676, 1.09221, -0.21667, -0.5357, 0.304263, -0.133165, -0.435454, 0.247325, -0.108246, -1.15526, 0.494869, -0.442686, -1.80676, 0.786862, -0.79336, -0.361177, 0.157296, -0.158595, -1.48843, 0.616284, -0.711483, -1.29819, 0.378651, -0.768613, -0.210335, 0.143883, -0.0103283, -1.3919, 0.448942, -0.931773,
-0.430528, 0.142257, -0.255929, -0.498494, 0.168652, -0.294285, -0.367004, 0.124166, -0.21666, -0.748706, 0.253036, -0.435889, -2.12643, 0.91895, -0.772803, -2.34751, 1.08406, -0.460646, -0.583652, 0.412833, -0.809258, -0.43633, 0.308628, -0.60499, -0.699858, 0.459207, -0.911535, -0.596448, 0.353766, -0.73385,
-0.729877, 0.424918, -0.7892, -0.54828, 0.319197, -0.592844, -0.52008, 0.322654, -0.529743, -0.68856, 0.421959, -0.681362, -0.926952, 0.568049, -0.917262, -0.616734, 0.384291, -0.556159, -0.6383, 0.39312, -0.686967, -0.567955, 0.349795, -0.611259, -0.707349, 0.475998, -0.731159, -1.12495, 0.886496, -1.17729,
-0.600246, 0.439254, -0.573949, -0.398919, 0.278664, -0.366733, -1.10234, 0.722166, -0.948305, -1.02223, 0.681345, -0.897224, -0.450247, 0.297488, -0.397382, -0.444344, 0.267446, -0.388704, -0.943047, 0.567609, -0.824961, -0.742742, 0.44466, -0.651913, -0.73559, 0.440378, -0.645636, -0.851788, 0.482764, -0.772888,
-0.568322, 0.337082, -0.555497, -0.727265, 0.417221, -0.717029, -0.699937, 0.380707, -0.723188, -0.710056, 0.382225, -0.639367, -0.708584, 0.365548, -0.639391, -0.626698, 0.345843, -0.545144, -0.673809, 0.370546, -0.580203, -0.668602, 0.349363, -0.57956, -0.781305, 0.40623, -0.664913, -0.876514, 0.462868, -0.742289,
-0.623, 0.326394, -0.518297, -0.751184, 0.395895, -0.623321, -0.970903, 0.0899635, -1.06421, -0.624459, 0.40561, -0.608641, -1.32293, 0.919724, -0.381179, -1.23093, 0.563521, -0.478471, -1.43546, 0.867796, -0.353574, -0.70146, 0.42406, -0.172779, -1.1962, 0.589452, -0.520803, -1.30776, 0.696055, -0.590475,
-0.588037, 0.229812, -0.316842, -0.750297, 0.296772, -0.407519, -0.856949, 0.338957, -0.465447, -0.486497, 0.360964, -0.676251, -0.678341, 0.488874, -0.859042, -0.537177, 0.387138, -0.680274, -0.575134, 0.366607, -0.627558, -1.11659, 0.89114, -1.32886, -0.724948, 0.524716, -0.827951, -0.648093, 0.485429, -0.795341,
-0.53439, 0.425392, -0.674501, -0.484928, 0.373129, -0.657948, -0.5183, 0.371362, -0.655422, -0.426111, 0.126986, -0.799818, -0.575139, 0.171399, -1.07955, -0.463172, 0.242066, -0.947304, -0.641195, 0.505502, -0.766566, -0.736933, 0.567175, -0.805201, -0.724647, 0.558819, -0.749679, -0.6999, 0.5322, -0.694621,
-0.55415, 0.467668, -0.551844, -0.830184, 0.698953, -0.826343, -0.413453, 0.363665, -0.399864, -0.610096, 0.515998, -0.735122, -0.480402, 0.385427, -0.55838, -0.943652, 0.757093, -1.09682, -0.686714, 0.560482, -0.767073, -0.539299, 0.479645, -0.588787, -0.710946, 0.632305, -0.776184, -0.663731, 0.602591, -0.674584,
-0.703127, 0.677428, -0.791342, -0.506916, 0.488388, -0.570514, -0.535278, 0.389476, -0.575389, -0.384677, 0.334594, -0.467562, -0.587181, 0.536991, -0.693744, -0.71736, 0.625713, -0.698258, -0.674871, 0.536342, -0.634526, -0.412185, 0.321814, -0.383858, -1.16855, 0.796839, -1.03806, -0.504389, 0.376033, -0.485001,
-0.537885, 0.401005, -0.51721, -0.599216, 0.475637, -0.64211, -0.57994, 0.0163458, -0.78298, -0.66156, 0.0141951, -0.897679, -0.630138, -0.0135786, -0.844096, -0.638753, -0.0394607, -0.857864, -0.559274, -0.0345507, -0.751122, -0.678853, 0.00448704, -0.960608, -0.563855, -0.0335292, -0.80734, -0.549217, -0.0326588, -0.786381,
-0.684723, -0.0407165, -0.980402, -0.582831, -0.0548725, -0.828886, -0.587993, -0.0720554, -0.842798, -0.51259, -0.0129061, -0.762182, -0.659862, -0.0353178, -0.982093, -0.807099, -0.0433887, -1.2017, -0.5273, -0.050236, -0.839484, -0.548539, -0.0522595, -0.873298, -0.633878, -0.0636059, -1.05729, -0.588808, -0.0592495, -1.0466,
-0.573294, -0.0376499, -0.981426, -0.419585, -0.0278226, -0.718063, -0.619193, 0.0116622, -1.05272, -0.512471, 0.00965211, -0.871276, -0.443805, -0.0038027, -0.747183, -0.708013, 0.0265327, -0.875523, -0.808793, 0.0303095, -1.00015, -0.935636, 0.0145925, -1.06234, -0.672428, -0.00809797, -0.785913, -0.603826, -0.0072718, -0.705733,
-0.658918, -0.038867, -0.790906, -0.597859, -0.0459754, -0.723467, -0.568926, -0.050806, -0.696207, -0.564766, -0.0018917, -0.700885, -0.531605, -0.00798557, -0.671593, -0.633705, -0.00951929, -0.800579, -0.582045, -0.0159231, -0.730584, -0.646638, -0.0466478, -0.823256, -0.564342, -0.040711, -0.718482, -0.571635, -0.0546366, -0.776833,
-0.536925, -0.062381, -0.741382, -0.789611, -0.0917386, -1.09029, -0.570486, -0.0677206, -0.849212, -0.509784, -0.0605149, -0.758852, -0.561625, -0.0637338, -0.880754, -0.550016, -0.0706017, -0.872355, -0.574962, -0.081179, -0.903375, -0.489695, -0.0691402, -0.769404, -0.571082, -0.075682, -0.951501, -0.719231, 0.0399211, -1.06239,
-0.495895, 0.00764798, -0.704194, -0.817406, 0.0126065, -1.16075, -0.656325, 0.0127567, -0.990463, -0.829373, 0.00118416, -1.23378, -0.49713, 0.399806, -0.393006, -0.835761, 0.672143, -0.660711, -0.653277, 0.525667, -0.519705, -0.551642, 0.486244, -0.421691, -0.752374, 0.695666, -0.627478, -0.529176, 0.489718, -0.440059,
-0.433799, 0.422743, -0.418639, -0.496471, 0.435215, -0.432941, -0.451913, 0.376559, -0.369824, -0.967167, 0.805897, -0.791483, -0.594296, -0.0533775, -0.696574, -0.642135, -0.0474632, -0.743769, -0.630311, -0.0472141, -0.729382, -0.676356, -0.0112888, -0.751165, -0.0500152, 0.526274, -0.293051, -0.601573, 0.973781, -0.580052,
-0.884727, 0.997106, -0.70554, -0.3199, 0.360533, -0.255109, -0.61775, 0.741123, -0.737517, -0.380487, 0.684915, -0.502904, -0.604148, 1.08753, -0.798524, 0.295223, 0.226676, 0.288171, 0.538485, 1.70973, 0.314334, 0.236739, 0.751663, 0.138194, -1.34916, 0.253996, -0.912566, -0.669054, 0.163308, -0.457871,
-1.20086, 0.284784, -0.838525, -0.75812, 0.233445, -0.526249, -0.416409, 0.118676, -1.11208, -0.299571, 0.0853775, -0.800046, -0.380206, 0.108359, -1.0154, -0.359987, 0.0913406, -0.940449, -0.458825, 0.115204, -1.2033, -0.332785, 0.0746889, -0.867, -0.308746, 0.0612064, -0.803872, -0.358423, 0.0678807, -0.949838,
-0.301371, 0.0595681, -0.797982, -0.382096, 0.0917014, -0.968011, -0.323206, 0.077568, -0.818817, -0.39165, 0.0611323, -0.929158, -0.418365, 0.0791877, -1.01546, -0.395642, 0.0601543, -0.894021, -0.490508, 0.0596176, -1.10657, -0.408233, 0.0457664, -0.959804, -0.424167, 0.053486, -0.977607, -0.453967, 0.0572437, -1.04629,
-0.275428, 0.0384208, -0.725448, -0.356824, 0.0398326, -1.01111, -0.375242, 0.00740053, -1.07537, -0.363182, 0.0236636, -0.825286, -0.505098, 0.0127551, -1.10821, -0.44465, 0.0112286, -0.975581, -0.547052, -0.0114426, -1.44792, -0.272546, -0.00570083, -0.721369, -0.410484, -0.0101478, -1.09235, -0.450754, -0.0277785, -1.19364,
-0.382966, -0.0267213, -0.937454, -0.402649, 0.0036464, -0.870018, -0.432444, -0.0415679, -1.15283, -0.90316, 0.232209, -0.708244, -0.938371, 0.232049, -0.796678, -0.43559, 0.116932, -0.540029, -0.993519, 0.266706, -1.23173, -0.727476, 0.18252, -0.885082, -0.278381, 0.116262, -0.466372, -1.13708, 0.339226, -1.34834,
-0.713686, 0.477148, -1.85605, -0.216116, 0.222961, -0.686456, -0.191905, 0.131127, -0.634078, 0.688863, 0.138274, -1.31661, 0.0207221, 0.0156428, -0.231284, -0.0752478, 0.0165447, -0.162342, -0.0350896, 0.0159829, -0.259376, -0.0363, 0.0165342, -0.268323, -0.140844, 0.0696817, -0.601292, -0.0677146, 0.0553594, -0.367631,
-0.39847, 0.094935, -0.399157, -0.59624, 0.142053, -0.597268, -0.19657, 0.0561307, -0.185891, -0.485753, 0.123092, -0.501101, -0.432545, 0.125436, -0.330755, -1.18772, 0.300916, -1.27722, -1.31316, 0.362629, -1.07599, -0.982958, 0.248197, -0.873432, -1.20834, 0.310363, -1.07075, -0.682158, 0.165106, -0.577102,
-0.400367, 0.126238, -1.05989, -0.435988, 0.150162, -1.10763, -0.380386, 0.131012, -0.966368, -0.281573, 0.0967229, -0.715027, -0.0279501, -0.0102845, -0.126379, -0.223396, 0.0304475, -0.256992, -2.18483, 0.461713, -2.00191, -0.0551983, 0.0116649, -0.0505769, -0.0486437, 0.0102797, -0.0445711, -0.559529, 0.324034, -0.808661,
-0.627523, 0.370252, -0.897559, -0.565539, 0.33368, -0.808903, -0.707845, 0.449083, -1.02014, -0.495212, 0.314181, -0.713699, -0.574073, 0.327068, -0.769273, -0.589, 0.315919, -0.797441, -0.90392, 0.500658, -1.13851, -0.406674, 0.253468, -0.518412, -0.469595, 0.271766, -0.531237, -2.10251, 0.44662, -2.12898,
-0.0191146, 0.00361008, -0.0215712, -0.0152011, 0.00247306, -0.0185139, -1.4376, -0.0498158, -2.75709, -0.00957191, 0.00363751, -0.00424275, -2.30237, 0.559125, -1.91118, -0.0252471, 0.00483922, -0.0262766, -1.68806, 0.329047, -1.74305, -0.0239828, 0.00499242, -0.023329, -2.41703, 0.690223, -1.41706, -0.191826, 0.0547791, -0.112464,
-0.0269472, 0.00706264, -0.0195596, -0.028556, 0.00627459, -0.0260597, -0.44041, 0.0533076, -1.04493, -0.468001, 0.0490701, -1.18416, -0.321499, 0.0182128, -0.769956, 0, 0, 0, 0, 0, 0, -0.584448, 0.649555, -0.569381, -0.438601, 0.487461, -0.427294, -0.737475, 0.81963, -0.718463,
-0.543566, 0.518608, -0.628494, -0.549327, 0.478102, -0.69356, -0.00838479, 0.00273889, -0.00536865, -2.5307, 0.826653, -1.62037, -0.529323, 0.280039, -0.597934, -0.501971, 0.265568, -0.567036, 0.00780476, -0.00251349, 0.00520978, 2.79913, -1.24804, 0.646684, -0.00369582, 0.000657626, -0.00438588, -0.00323693, 0.000575972, -0.00384131,
-0.0515893, 0.0124404, -0.0476194, -0.0132026, 0.00318371, -0.0121867, 2.35564, -0.62518, 1.95489, 0.0935313, -0.0138708, 0.0889182, -0.597737, 0.452905, -0.485198, -0.68717, 0.192146, -0.502142, -1.32757, 0.371213, -0.970108, -0.230016, 0.133488, -0.540548, -0.264583, 0.153549, -0.621782, -0.91875, 0.352196, -0.440532,
-0.8354, 0.386139, -0.499787, -1.04649, 0.483707, -0.626071, -1.21112, 0.506171, -0.720275, -0.699854, 0.292494, -0.416215, -0.592414, 0.176, -0.440282, -0.420527, 0.0798943, -0.840048, -0.612639, 0.116393, -1.22381, -0.335777, 0.0706421, -0.690611, -0.806128, 0.126232, -0.526414, -0.83958, 0.13147, -0.548259,
-0.962388, 0.150701, -0.628455, -0.806577, 0.102184, -0.557227, -0.778311, 0.0877097, -0.570314, -0.9173, 0.103373, -0.67216, -0.420248, 0.000165306, -0.624009, -0.763803, 0.000300444, -1.13414, -0.446188, -0.0618643, -0.776744
};

static GLuint tindices2[1439*3] = {
0, 1, 749, 1, 2, 749, 749, 2, 747, 1, 559, 2, 559, 552, 2, 2, 552, 3, 233, 638, 4, 638, 5, 4, 4, 5, 691, 5, 6, 691,
691, 6, 7, 6, 8, 7, 7, 8, 767, 8, 9, 767, 767, 9, 686, 9, 18, 686, 686, 18, 685, 18, 10, 685, 685, 10, 12, 10, 11, 12,
5, 313, 6, 313, 314, 6, 6, 314, 8, 314, 13, 8, 8, 13, 9, 13, 316, 9, 9, 316, 18, 316, 315, 18, 18, 315, 14, 315, 15, 14,
14, 15, 24, 15, 544, 24, 24, 544, 383, 544, 16, 383, 14, 17, 18, 17, 19, 18, 18, 19, 20, 19, 468, 20, 20, 468, 23, 468, 21, 23,
23, 21, 22, 21, 17, 22, 22, 17, 24, 17, 14, 24, 18, 20, 10, 20, 23, 10, 10, 23, 25, 23, 22, 25, 25, 22, 393, 22, 24, 393,
393, 24, 383, 393, 27, 25, 27, 11, 25, 25, 11, 10, 11, 27, 26, 27, 28, 26, 26, 28, 30, 28, 29, 30, 30, 29, 69, 29, 31, 69,
69, 31, 68, 31, 32, 68, 68, 32, 67, 32, 36, 67, 67, 36, 63, 36, 42, 63, 63, 42, 34, 42, 33, 34, 29, 35, 31, 35, 420, 31,
31, 420, 32, 420, 522, 32, 32, 522, 36, 522, 37, 36, 36, 37, 38, 37, 39, 38, 38, 39, 40, 39, 391, 40, 40, 391, 44, 391, 41, 44,
44, 41, 45, 41, 573, 45, 36, 38, 42, 38, 40, 42, 42, 40, 33, 40, 44, 33, 33, 44, 43, 44, 45, 43, 43, 45, 59, 45, 46, 59,
59, 46, 48, 46, 47, 48, 48, 47, 53, 47, 284, 53, 53, 284, 51, 284, 49, 51, 49, 50, 51, 50, 54, 51, 51, 54, 52, 54, 55, 52,
52, 55, 53, 55, 59, 53, 53, 59, 48, 50, 305, 54, 305, 307, 54, 54, 307, 55, 307, 57, 55, 55, 57, 56, 57, 61, 56, 56, 61, 58,
61, 34, 58, 58, 34, 33, 33, 43, 58, 43, 59, 58, 58, 59, 56, 59, 55, 56, 60, 718, 228, 718, 734, 228, 34, 61, 63, 61, 75, 63,
63, 75, 62, 75, 76, 62, 62, 76, 105, 62, 105, 63, 105, 64, 63, 63, 64, 65, 64, 104, 65, 65, 104, 66, 104, 648, 66, 66, 648, 649,
63, 65, 67, 65, 66, 67, 67, 66, 68, 66, 69, 68, 734, 718, 735, 718, 717, 735, 735, 717, 70, 717, 485, 70, 70, 71, 735, 71, 737, 735,
71, 72, 737, 72, 740, 737, 57, 73, 61, 73, 74, 61, 61, 74, 75, 74, 106, 75, 75, 106, 76, 307, 308, 77, 308, 778, 77, 77, 778, 103,
778, 780, 103, 103, 780, 78, 780, 84, 78, 78, 84, 79, 84, 86, 79, 79, 86, 650, 86, 85, 650, 650, 85, 80, 85, 81, 80, 80, 81, 454,
81, 90, 454, 780, 82, 84, 82, 83, 84, 84, 83, 86, 83, 85, 86, 83, 87, 85, 87, 81, 85, 87, 88, 81, 88, 90, 81, 88, 89, 90,
89, 772, 90, 90, 772, 453, 772, 770, 453, 453, 770, 530, 770, 91, 530, 530, 91, 92, 91, 93, 92, 92, 93, 529, 93, 97, 529, 529, 97, 100,
97, 98, 100, 100, 98, 95, 98, 96, 95, 770, 94, 91, 94, 95, 91, 91, 95, 93, 95, 96, 93, 93, 96, 97, 96, 98, 97, 95, 94, 100,
94, 99, 100, 100, 99, 101, 57, 77, 73, 77, 102, 73, 73, 102, 74, 102, 106, 74, 77, 103, 102, 103, 78, 102, 102, 78, 64, 78, 104, 64,
64, 105, 102, 105, 106, 102, 107, 116, 108, 116, 117, 108, 108, 117, 109, 117, 119, 109, 109, 119, 110, 119, 121, 110, 110, 121, 111, 121, 112, 111,
111, 112, 113, 112, 123, 113, 113, 123, 114, 123, 115, 114, 114, 115, 512, 115, 514, 512, 116, 272, 117, 272, 274, 117, 117, 274, 119, 274, 118, 119,
119, 118, 121, 118, 120, 121, 121, 120, 112, 120, 122, 112, 112, 122, 123, 122, 124, 123, 123, 124, 115, 124, 127, 115, 115, 127, 514, 127, 128, 514,
122, 204, 124, 204, 125, 124, 124, 125, 127, 125, 126, 127, 127, 126, 128, 126, 132, 128, 128, 132, 129, 132, 131, 129, 129, 131, 519, 131, 130, 519,
519, 130, 520, 130, 257, 520, 257, 130, 258, 130, 131, 258, 258, 131, 142, 131, 132, 142, 142, 132, 133, 132, 126, 133, 133, 126, 134, 126, 135, 134,
134, 135, 136, 135, 137, 136, 136, 137, 148, 137, 139, 148, 148, 139, 138, 139, 153, 138, 142, 133, 141, 133, 134, 141, 141, 134, 140, 134, 136, 140,
140, 136, 148, 140, 145, 141, 145, 143, 141, 141, 143, 142, 143, 258, 142, 258, 143, 260, 143, 145, 260, 260, 145, 144, 145, 250, 144, 250, 145, 146,
145, 140, 146, 146, 140, 147, 140, 148, 147, 147, 148, 254, 148, 149, 254, 254, 149, 256, 149, 154, 256, 256, 154, 190, 154, 156, 190, 190, 156, 150,
156, 151, 150, 150, 151, 152, 151, 167, 152, 148, 138, 149, 138, 153, 149, 149, 153, 154, 153, 155, 154, 154, 155, 156, 155, 157, 156, 156, 157, 151,
157, 167, 151, 155, 153, 157, 153, 158, 157, 157, 158, 163, 158, 206, 163, 163, 206, 159, 206, 160, 159, 159, 160, 161, 160, 162, 161, 161, 162, 118,
162, 120, 118, 157, 163, 167, 163, 159, 167, 167, 159, 168, 159, 276, 168, 168, 276, 169, 276, 164, 169, 169, 164, 170, 164, 273, 170, 170, 273, 165,
273, 271, 165, 165, 271, 210, 271, 166, 210, 210, 166, 209, 166, 270, 209, 167, 168, 152, 168, 169, 152, 152, 169, 184, 169, 170, 184, 184, 170, 183,
170, 165, 183, 183, 165, 181, 165, 171, 181, 181, 171, 178, 171, 172, 178, 178, 172, 175, 172, 309, 175, 175, 309, 174, 309, 173, 174, 173, 436, 174,
436, 176, 174, 174, 176, 175, 176, 177, 175, 175, 177, 178, 177, 179, 178, 178, 179, 181, 179, 180, 181, 181, 180, 183, 180, 182, 183, 183, 182, 184,
182, 186, 184, 184, 186, 200, 186, 203, 200, 180, 192, 182, 192, 193, 182, 182, 193, 186, 193, 185, 186, 186, 185, 203, 185, 199, 203, 203, 199, 188,
199, 187, 188, 188, 187, 189, 187, 643, 189, 189, 643, 190, 180, 433, 192, 433, 191, 192, 192, 191, 193, 191, 431, 193, 193, 431, 185, 431, 194, 185,
185, 194, 196, 194, 195, 196, 196, 195, 197, 195, 313, 197, 197, 313, 198, 313, 5, 198, 198, 5, 187, 5, 638, 187, 185, 196, 199, 196, 197, 199,
199, 197, 198, 184, 200, 152, 200, 201, 152, 152, 201, 150, 201, 202, 150, 150, 202, 189, 202, 188, 189, 200, 203, 201, 203, 188, 201, 201, 188, 202,
162, 160, 120, 160, 206, 120, 120, 206, 204, 206, 137, 204, 204, 137, 125, 137, 135, 125, 125, 135, 126, 137, 206, 205, 206, 158, 205, 205, 158, 139,
158, 153, 139, 207, 208, 211, 208, 172, 211, 211, 172, 209, 172, 171, 209, 209, 171, 210, 171, 165, 210, 209, 270, 211, 270, 212, 211, 213, 627, 226,
627, 641, 226, 226, 641, 227, 641, 214, 227, 227, 214, 215, 214, 639, 215, 215, 639, 217, 639, 216, 217, 217, 216, 221, 216, 645, 221, 221, 645, 218,
215, 217, 219, 217, 221, 219, 219, 221, 220, 221, 218, 220, 220, 218, 470, 218, 469, 470, 470, 471, 220, 471, 526, 220, 220, 526, 219, 526, 524, 219,
219, 524, 215, 524, 100, 215, 215, 100, 222, 100, 223, 222, 222, 223, 226, 223, 224, 226, 226, 224, 225, 226, 227, 222, 227, 215, 222, 244, 243, 246,
243, 734, 246, 243, 229, 734, 229, 228, 734, 228, 229, 714, 229, 763, 714, 714, 763, 715, 763, 230, 715, 715, 230, 234, 763, 231, 230, 231, 232, 230,
230, 232, 233, 232, 647, 233, 233, 693, 230, 693, 234, 230, 70, 485, 231, 485, 235, 231, 231, 235, 236, 235, 469, 236, 70, 237, 71, 237, 241, 71,
71, 241, 72, 241, 238, 72, 72, 238, 239, 238, 240, 239, 239, 240, 739, 238, 241, 242, 241, 237, 242, 242, 237, 243, 237, 229, 243, 243, 762, 242,
762, 736, 242, 242, 736, 238, 736, 240, 238, 243, 244, 762, 244, 757, 762, 762, 757, 245, 757, 244, 247, 244, 246, 247, 247, 246, 758, 246, 760, 758,
758, 760, 761, 758, 759, 247, 759, 248, 247, 247, 248, 757, 248, 731, 757, 248, 759, 249, 759, 753, 249, 249, 753, 733, 733, 756, 249, 756, 248, 249,
146, 147, 250, 147, 261, 250, 250, 261, 251, 147, 254, 261, 254, 252, 261, 261, 252, 263, 252, 253, 263, 263, 253, 764, 253, 632, 764, 764, 632, 633,
252, 254, 253, 254, 255, 253, 253, 255, 632, 255, 631, 632, 631, 255, 256, 255, 254, 256, 257, 258, 259, 258, 260, 259, 261, 263, 262, 263, 764, 262,
262, 764, 264, 764, 625, 264, 265, 267, 116, 267, 272, 116, 272, 267, 266, 267, 268, 266, 266, 268, 270, 268, 269, 270, 270, 166, 266, 166, 271, 266,
266, 271, 272, 271, 273, 272, 272, 273, 274, 273, 275, 274, 274, 275, 118, 275, 161, 118, 273, 164, 275, 164, 276, 275, 275, 276, 161, 276, 159, 161,
277, 278, 279, 278, 280, 279, 279, 280, 635, 280, 289, 635, 635, 289, 282, 289, 281, 282, 282, 281, 283, 281, 285, 283, 283, 285, 637, 285, 284, 637,
637, 284, 47, 284, 285, 286, 285, 281, 286, 286, 281, 287, 281, 289, 287, 287, 289, 288, 289, 290, 288, 288, 290, 294, 290, 317, 294, 294, 317, 296,
317, 291, 296, 296, 291, 292, 291, 321, 292, 292, 321, 293, 321, 323, 293, 287, 288, 295, 288, 294, 295, 295, 294, 325, 294, 296, 325, 325, 296, 298,
296, 292, 298, 298, 292, 293, 293, 297, 298, 297, 299, 298, 298, 299, 325, 299, 301, 325, 325, 301, 324, 301, 300, 324, 324, 300, 286, 300, 49, 286,
286, 49, 284, 49, 300, 50, 300, 301, 50, 50, 301, 306, 301, 302, 306, 306, 302, 303, 302, 311, 303, 303, 311, 304, 304, 782, 303, 782, 305, 303,
303, 305, 306, 305, 50, 306, 305, 782, 307, 782, 308, 307, 172, 208, 309, 208, 310, 309, 311, 302, 312, 302, 299, 312, 312, 299, 297, 313, 195, 314,
195, 194, 314, 314, 194, 315, 194, 15, 315, 314, 315, 13, 315, 316, 13, 278, 318, 280, 318, 290, 280, 280, 290, 289, 290, 318, 317, 318, 319, 317,
317, 319, 320, 317, 320, 291, 320, 321, 291, 320, 322, 321, 322, 323, 321, 286, 287, 324, 287, 295, 324, 324, 295, 325, 326, 327, 328, 327, 329, 328,
328, 329, 330, 329, 331, 330, 330, 331, 680, 331, 335, 680, 680, 335, 332, 335, 342, 332, 332, 342, 681, 342, 343, 681, 681, 343, 673, 343, 346, 673,
673, 346, 668, 346, 333, 668, 327, 334, 329, 334, 419, 329, 329, 419, 331, 419, 335, 331, 335, 419, 342, 419, 336, 342, 342, 336, 337, 336, 416, 337,
337, 416, 341, 416, 338, 341, 341, 338, 589, 338, 339, 589, 589, 340, 341, 340, 344, 341, 341, 344, 337, 344, 345, 337, 337, 345, 342, 345, 343, 342,
344, 340, 345, 340, 351, 345, 345, 351, 343, 351, 352, 343, 343, 352, 346, 352, 353, 346, 346, 353, 333, 353, 347, 333, 333, 347, 666, 347, 401, 666,
666, 401, 348, 401, 400, 348, 348, 400, 350, 400, 349, 350, 340, 591, 351, 591, 354, 351, 351, 354, 352, 354, 357, 352, 352, 357, 353, 357, 358, 353,
353, 358, 347, 358, 401, 347, 591, 355, 354, 355, 356, 354, 354, 356, 357, 356, 363, 357, 357, 363, 358, 363, 359, 358, 358, 359, 360, 359, 364, 360,
360, 364, 361, 364, 365, 361, 361, 365, 362, 365, 367, 362, 362, 367, 776, 367, 368, 776, 363, 593, 359, 593, 373, 359, 359, 373, 364, 373, 374, 364,
364, 374, 365, 374, 366, 365, 365, 366, 367, 366, 369, 367, 367, 369, 368, 369, 370, 368, 368, 370, 371, 370, 424, 371, 371, 424, 452, 424, 402, 452,
593, 372, 373, 372, 375, 373, 373, 375, 374, 375, 379, 374, 374, 379, 366, 379, 376, 366, 366, 376, 369, 376, 377, 369, 369, 377, 422, 377, 543, 422,
422, 543, 426, 543, 378, 426, 426, 378, 429, 378, 545, 429, 372, 622, 375, 622, 380, 375, 375, 380, 379, 380, 381, 379, 379, 381, 376, 381, 382, 376,
376, 382, 377, 382, 384, 377, 377, 384, 543, 384, 16, 543, 543, 16, 544, 380, 385, 381, 385, 386, 381, 381, 386, 382, 386, 389, 382, 382, 389, 384,
389, 383, 384, 384, 383, 16, 385, 390, 386, 390, 387, 386, 386, 387, 389, 387, 388, 389, 389, 388, 383, 388, 393, 383, 388, 387, 39, 387, 390, 39,
39, 390, 391, 390, 572, 391, 391, 572, 41, 572, 573, 41, 39, 392, 388, 392, 397, 388, 388, 397, 393, 397, 399, 393, 393, 399, 421, 399, 398, 421,
421, 398, 394, 398, 395, 394, 394, 395, 396, 395, 392, 396, 396, 392, 420, 392, 522, 420, 392, 395, 397, 395, 398, 397, 397, 398, 399, 358, 360, 401,
360, 400, 401, 360, 361, 400, 361, 349, 400, 361, 362, 349, 362, 775, 349, 349, 775, 777, 775, 452, 777, 777, 452, 447, 452, 402, 447, 447, 402, 451,
402, 405, 451, 451, 405, 449, 405, 404, 449, 449, 404, 438, 404, 410, 438, 438, 410, 403, 410, 408, 403, 404, 405, 412, 405, 425, 412, 412, 425, 413,
425, 406, 413, 413, 406, 414, 406, 407, 414, 414, 407, 415, 407, 409, 415, 415, 409, 408, 409, 434, 408, 408, 434, 403, 434, 435, 403, 403, 435, 711,
435, 713, 711, 404, 412, 410, 412, 411, 410, 410, 411, 408, 411, 415, 408, 412, 413, 411, 413, 414, 411, 411, 414, 415, 338, 416, 418, 416, 417, 418,
416, 336, 417, 336, 419, 417, 417, 419, 334, 396, 420, 394, 420, 35, 394, 394, 35, 29, 394, 29, 421, 29, 28, 421, 421, 28, 27, 369, 422, 370,
422, 427, 370, 370, 427, 423, 427, 406, 423, 423, 406, 425, 370, 423, 424, 423, 425, 424, 424, 425, 402, 425, 405, 402, 422, 426, 427, 426, 429, 427,
427, 429, 428, 429, 430, 428, 428, 430, 432, 430, 431, 432, 432, 431, 191, 191, 433, 432, 433, 406, 432, 432, 406, 428, 406, 427, 428, 406, 433, 407,
433, 180, 407, 407, 180, 179, 407, 179, 409, 179, 177, 409, 409, 177, 176, 409, 176, 434, 176, 436, 434, 434, 436, 435, 436, 713, 435, 713, 436, 437,
436, 173, 437, 403, 711, 438, 711, 439, 438, 438, 439, 440, 439, 441, 440, 440, 441, 448, 441, 662, 448, 448, 662, 442, 662, 661, 442, 442, 661, 446,
661, 443, 446, 446, 443, 444, 443, 350, 444, 444, 350, 349, 444, 777, 446, 777, 445, 446, 446, 445, 442, 445, 447, 442, 442, 447, 448, 447, 450, 448,
448, 450, 440, 450, 449, 440, 440, 449, 438, 449, 450, 451, 450, 447, 451, 452, 775, 371, 775, 776, 371, 371, 776, 368, 90, 453, 454, 453, 774, 454,
454, 774, 455, 453, 530, 774, 530, 456, 774, 774, 456, 467, 456, 457, 467, 467, 457, 464, 457, 458, 464, 464, 458, 460, 458, 459, 460, 460, 459, 461,
459, 462, 461, 461, 462, 708, 462, 765, 708, 461, 463, 460, 463, 684, 460, 460, 684, 464, 684, 465, 464, 464, 465, 467, 465, 466, 467, 467, 466, 774,
466, 69, 774, 468, 19, 21, 19, 17, 21, 469, 478, 470, 478, 471, 470, 478, 475, 471, 475, 474, 471, 471, 474, 472, 474, 473, 472, 472, 473, 525,
473, 477, 525, 525, 477, 459, 477, 462, 459, 474, 475, 473, 475, 476, 473, 473, 476, 477, 476, 766, 477, 477, 766, 462, 766, 765, 462, 766, 476, 479,
476, 475, 479, 479, 475, 481, 475, 478, 481, 481, 478, 484, 478, 469, 484, 484, 469, 485, 766, 479, 480, 479, 481, 480, 480, 481, 704, 481, 482, 704,
704, 482, 483, 482, 717, 483, 481, 484, 482, 484, 485, 482, 482, 485, 717, 486, 722, 487, 722, 489, 487, 487, 489, 488, 489, 728, 488, 488, 728, 490,
728, 491, 490, 490, 491, 497, 491, 510, 497, 497, 510, 492, 510, 493, 492, 492, 493, 494, 493, 495, 494, 494, 495, 523, 495, 505, 523, 487, 488, 534,
488, 490, 534, 534, 490, 496, 490, 497, 496, 496, 497, 536, 497, 492, 536, 536, 492, 562, 492, 498, 562, 562, 498, 548, 498, 499, 548, 548, 499, 569,
499, 500, 569, 569, 500, 501, 500, 502, 501, 499, 498, 500, 498, 523, 500, 500, 523, 502, 523, 505, 502, 502, 505, 501, 505, 504, 501, 501, 504, 503,
504, 505, 506, 505, 507, 506, 507, 505, 508, 505, 495, 508, 508, 495, 515, 495, 493, 515, 515, 493, 509, 493, 510, 509, 509, 510, 511, 510, 491, 511,
511, 491, 512, 491, 114, 512, 515, 509, 513, 509, 511, 513, 513, 511, 512, 512, 514, 513, 514, 517, 513, 513, 517, 515, 517, 518, 515, 515, 518, 508,
518, 516, 508, 508, 516, 507, 516, 521, 507, 514, 128, 517, 128, 129, 517, 517, 129, 518, 129, 519, 518, 518, 519, 516, 519, 520, 516, 516, 520, 521,
39, 37, 392, 37, 522, 392, 498, 492, 523, 492, 494, 523, 524, 526, 528, 526, 527, 528, 528, 527, 769, 527, 525, 769, 769, 525, 459, 526, 471, 527,
471, 472, 527, 527, 472, 525, 528, 769, 100, 769, 529, 100, 529, 769, 532, 769, 458, 532, 532, 458, 531, 458, 457, 531, 531, 457, 456, 456, 530, 531,
530, 92, 531, 531, 92, 532, 92, 529, 532, 533, 487, 542, 487, 534, 542, 542, 534, 535, 534, 496, 535, 535, 496, 537, 496, 536, 537, 537, 536, 562,
537, 562, 535, 562, 538, 535, 535, 538, 539, 538, 540, 539, 539, 540, 541, 541, 542, 539, 542, 535, 539, 543, 544, 378, 544, 15, 378, 378, 15, 545,
15, 194, 545, 545, 194, 431, 431, 430, 545, 430, 429, 545, 540, 538, 553, 538, 546, 553, 553, 546, 547, 546, 548, 547, 547, 548, 554, 548, 569, 554,
554, 569, 571, 569, 549, 571, 571, 549, 550, 549, 566, 550, 550, 566, 551, 566, 552, 551, 551, 552, 559, 553, 547, 563, 547, 554, 563, 563, 554, 555,
554, 556, 555, 555, 556, 557, 556, 550, 557, 557, 550, 558, 550, 551, 558, 558, 551, 560, 551, 559, 560, 560, 559, 1, 558, 560, 561, 560, 1, 561,
561, 1, 0, 538, 562, 546, 562, 548, 546, 563, 555, 564, 555, 557, 564, 552, 566, 565, 566, 567, 565, 566, 570, 567, 570, 568, 567, 567, 568, 503,
568, 501, 503, 566, 549, 570, 549, 569, 570, 570, 569, 501, 550, 556, 571, 556, 554, 571, 390, 385, 572, 385, 619, 572, 572, 619, 573, 619, 620, 573,
573, 620, 595, 620, 621, 595, 595, 621, 604, 621, 577, 604, 604, 577, 605, 577, 574, 605, 605, 574, 575, 574, 580, 575, 575, 580, 576, 580, 581, 576,
621, 784, 577, 784, 785, 577, 577, 785, 574, 785, 578, 574, 574, 578, 580, 578, 579, 580, 580, 579, 581, 579, 612, 581, 581, 612, 582, 612, 613, 582,
582, 613, 610, 785, 583, 578, 583, 584, 578, 578, 584, 579, 584, 585, 579, 579, 585, 614, 585, 586, 614, 614, 586, 587, 586, 588, 587, 587, 588, 618,
588, 340, 618, 618, 340, 589, 340, 588, 591, 588, 586, 591, 591, 586, 590, 586, 585, 590, 590, 585, 584, 584, 594, 590, 594, 355, 590, 590, 355, 591,
584, 583, 594, 583, 592, 594, 594, 592, 363, 592, 593, 363, 363, 356, 594, 356, 355, 594, 573, 595, 45, 595, 596, 45, 45, 596, 46, 596, 597, 46,
46, 597, 598, 597, 603, 598, 598, 603, 599, 603, 606, 599, 599, 606, 600, 606, 607, 600, 600, 607, 636, 607, 608, 636, 636, 608, 601, 608, 602, 601,
597, 604, 603, 604, 605, 603, 603, 605, 606, 605, 575, 606, 606, 575, 607, 575, 576, 607, 607, 576, 608, 576, 609, 608, 608, 609, 602, 609, 611, 602,
576, 581, 609, 581, 582, 609, 609, 582, 611, 582, 610, 611, 579, 614, 612, 614, 616, 612, 612, 616, 613, 616, 617, 613, 614, 587, 616, 587, 615, 616,
616, 615, 617, 587, 618, 615, 618, 786, 615, 597, 596, 604, 596, 595, 604, 385, 380, 619, 380, 620, 619, 380, 622, 620, 622, 784, 620, 620, 784, 621,
622, 372, 784, 372, 623, 784, 784, 623, 583, 623, 592, 583, 592, 623, 593, 623, 372, 593, 624, 625, 627, 625, 626, 627, 627, 626, 641, 626, 628, 641,
641, 628, 629, 628, 631, 629, 629, 631, 630, 631, 256, 630, 631, 628, 632, 628, 626, 632, 632, 626, 633, 626, 625, 633, 602, 634, 601, 634, 279, 601,
601, 279, 635, 601, 635, 636, 635, 282, 636, 636, 282, 600, 282, 283, 600, 600, 283, 599, 283, 637, 599, 599, 637, 598, 637, 47, 598, 598, 47, 46,
72, 239, 740, 239, 738, 740, 233, 647, 638, 647, 646, 638, 638, 646, 644, 646, 639, 644, 644, 639, 642, 639, 640, 642, 642, 640, 629, 640, 641, 629,
629, 630, 642, 630, 643, 642, 642, 643, 644, 641, 640, 214, 640, 639, 214, 218, 645, 236, 645, 232, 236, 639, 646, 216, 646, 647, 216, 216, 647, 645,
78, 79, 104, 79, 648, 104, 648, 79, 649, 79, 651, 649, 649, 651, 455, 651, 454, 455, 79, 650, 651, 650, 80, 651, 651, 80, 454, 652, 653, 654,
653, 662, 654, 654, 662, 441, 662, 653, 655, 653, 656, 655, 655, 656, 657, 656, 659, 657, 657, 659, 658, 659, 660, 658, 658, 660, 670, 658, 667, 657,
667, 664, 657, 657, 664, 655, 664, 661, 655, 655, 661, 662, 667, 663, 664, 663, 665, 664, 664, 665, 661, 665, 443, 661, 663, 348, 665, 348, 350, 665,
665, 350, 443, 348, 663, 666, 663, 333, 666, 333, 663, 668, 663, 667, 668, 668, 667, 669, 667, 658, 669, 669, 658, 742, 658, 670, 742, 742, 670, 743,
670, 671, 743, 743, 671, 677, 671, 672, 677, 677, 672, 678, 668, 669, 673, 669, 674, 673, 673, 674, 675, 674, 676, 675, 675, 676, 679, 676, 677, 679,
679, 677, 678, 678, 680, 679, 680, 332, 679, 679, 332, 675, 332, 681, 675, 675, 681, 673, 678, 682, 680, 682, 330, 680, 69, 466, 30, 466, 465, 30,
30, 465, 683, 465, 684, 683, 683, 684, 12, 684, 709, 12, 12, 709, 685, 709, 687, 685, 685, 687, 686, 687, 689, 686, 686, 689, 767, 689, 688, 767,
767, 688, 768, 688, 690, 768, 709, 707, 687, 707, 688, 687, 687, 688, 689, 707, 705, 688, 705, 690, 688, 705, 699, 690, 699, 692, 690, 690, 692, 768,
692, 691, 768, 768, 691, 7, 699, 698, 692, 698, 4, 692, 692, 4, 691, 4, 698, 693, 698, 694, 693, 693, 694, 234, 694, 696, 234, 234, 696, 715,
696, 695, 715, 715, 695, 717, 695, 483, 717, 483, 695, 702, 695, 696, 702, 702, 696, 697, 696, 694, 697, 697, 694, 698, 698, 699, 697, 699, 700, 697,
697, 700, 701, 700, 703, 701, 701, 703, 702, 703, 704, 702, 702, 704, 483, 699, 705, 700, 705, 706, 700, 700, 706, 703, 706, 480, 703, 703, 480, 704,
705, 707, 706, 707, 765, 706, 706, 765, 480, 765, 707, 708, 707, 709, 708, 708, 709, 463, 709, 684, 463, 30, 683, 26, 683, 11, 26, 441, 439, 654,
439, 712, 654, 654, 712, 710, 439, 711, 712, 711, 713, 712, 228, 714, 60, 714, 716, 60, 714, 715, 716, 715, 717, 716, 716, 717, 718, 108, 109, 719,
109, 724, 719, 719, 724, 721, 724, 720, 721, 721, 720, 723, 720, 722, 723, 109, 725, 724, 725, 727, 724, 724, 727, 720, 727, 489, 720, 720, 489, 722,
109, 110, 725, 110, 111, 725, 725, 111, 754, 111, 113, 754, 754, 113, 755, 113, 114, 755, 755, 114, 491, 725, 754, 727, 754, 726, 727, 727, 726, 728,
726, 755, 728, 728, 755, 491, 734, 736, 729, 736, 245, 729, 729, 245, 730, 245, 731, 730, 730, 731, 732, 731, 756, 732, 732, 756, 733, 729, 730, 752,
730, 732, 752, 752, 732, 733, 734, 735, 736, 735, 737, 736, 736, 737, 240, 737, 741, 240, 240, 741, 739, 741, 738, 739, 738, 741, 740, 741, 737, 740,
674, 669, 744, 669, 742, 744, 744, 742, 743, 743, 677, 744, 677, 676, 744, 744, 676, 674, 747, 748, 749, 557, 558, 750, 751, 553, 563, 501, 568, 570,
728, 489, 727, 752, 733, 753, 239, 739, 738, 761, 753, 759, 754, 755, 726, 729, 752, 761, 761, 752, 753, 248, 756, 731, 731, 245, 757, 758, 761, 759,
734, 729, 760, 760, 729, 761, 762, 245, 736, 716, 718, 60, 246, 734, 760, 120, 204, 122, 237, 70, 229, 139, 137, 205, 235, 485, 469, 702, 697, 701,
763, 70, 231, 70, 763, 229, 218, 236, 469, 231, 236, 232, 625, 764, 633, 480, 765, 766, 232, 645, 647, 630, 256, 190, 4, 693, 233, 150, 189, 190,
643, 630, 190, 767, 768, 7, 187, 199, 198, 463, 461, 708, 644, 187, 638, 187, 644, 643, 458, 769, 459, 524, 528, 100, 224, 100, 101, 100, 224, 223,
94, 770, 771, 12, 11, 683, 772, 773, 770, 455, 774, 69, 421, 27, 393, 649, 455, 69, 649, 69, 66, 445, 777, 447, 106, 105, 76, 775, 362, 776,
444, 349, 777, 778, 779, 780, 307, 77, 57, 308, 781, 778, 782, 783, 308, 52, 53, 51, 784, 583, 785, 302, 301, 299, 618, 589, 786
};


void drawStomach()
{
	  glBegin(GL_TRIANGLES);
	  for (i = 0; i < 1439; i++) {
	        glNormal3f(vnormal[(tindices2[3*i+0])*3+0], vnormal[(tindices2[3*i+0])*3+1], vnormal[(tindices2[3*i+0])*3+2]);
	        glVertex3f(vdata2[(tindices2[3*i+0])*3+0],vdata2[(tindices2[3*i+0])*3+1], vdata2[(tindices2[3*i+0])*3+2]);
	        glNormal3f(vnormal[(tindices2[3*i+1])*3+0], vnormal[(tindices2[3*i+1])*3+1], vnormal[(tindices2[3*i+1])*3+2]);
	        glVertex3f(vdata2[(tindices2[3*i+1])*3+0],vdata2[(tindices2[3*i+1])*3+1], vdata2[(tindices2[3*i+1])*3+2]);
	        glNormal3f(vnormal[(tindices2[3*i+2])*3+0], vnormal[(tindices2[3*i+2])*3+1], vnormal[(tindices2[3*i+2])*3+2]);
	        glVertex3f(vdata2[(tindices2[3*i+2])*3+0],vdata2[(tindices2[3*i+2])*3+1], vdata2[(tindices2[3*i+2])*3+2]);
//			glNormal3fv(&vnormal[(tindices2[3*i+0])*3+0]);
//			glVertex3fv(&vdata2[(tindices2[3*i+0])*3+0]);
//			glNormal3fv(&vnormal[(tindices2[3*i+1])*3+0]);
//			glVertex3fv(&vdata2[(tindices2[3*i+1])*3+0]);
//			glNormal3fv(&vnormal[(tindices2[3*i+2])*3+0]);
//			glVertex3fv(&vdata2[(tindices2[3*i+2])*3+0]);
	  }
	  glEnd();

}

void normalize(float v[3]) {
   GLfloat d = sqrt(v[0]*v[0]+v[1]*v[1]+v[2]*v[2]);
   if (d == 0.0) {
      cout << "zero length vector" << endl;
      return;
   }
   v[0] /= d; v[1] /= d; v[2] /= d;
}

void normcrossprod(float v1[3], float v2[3], float out[3])
{
   GLint i, j;
   GLfloat length;

   out[0] = v1[1]*v2[2] - v1[2]*v2[1];
   out[1] = v1[2]*v2[0] - v1[0]*v2[2];
   out[2] = v1[0]*v2[1] - v1[1]*v2[0];
   normalize(out);
}

void drawtriangle(float *v1, float *v2, float *v3)
{
   glBegin(GL_TRIANGLES);
      glNormal3fv(v1); glVertex3fv(v1);
      glNormal3fv(v2); glVertex3fv(v2);
      glNormal3fv(v3); glVertex3fv(v3);
   glEnd();
}

void subdivide(float *v1, float *v2, float *v3, long depth)
{
   GLfloat v12[3], v23[3], v31[3];
   GLint i;

   if (depth == 0) {
      drawtriangle(v1, v2, v3);
      return;
   }
   for (i = 0; i < 3; i++) {
      v12[i] = v1[i]+v2[i];
      v23[i] = v2[i]+v3[i];
      v31[i] = v3[i]+v1[i];
   }
   normalize(v12);
   normalize(v23);
   normalize(v31);
   subdivide(v1, v12, v31, depth-1);
   subdivide(v2, v23, v12, depth-1);
   subdivide(v3, v31, v23, depth-1);
   subdivide(v12, v23, v31, depth-1);
}
void drawIcosahedron()
{
	  glBegin(GL_TRIANGLES);
//	  for (i = 0; i < 20; i++) {
//	        glNormal3fv(&vdata[tindices[i][0]][0]);
//	        glVertex3fv(&vdata[tindices[i][0]][0]);
//	        glNormal3fv(&vdata[tindices[i][1]][0]);
//	        glVertex3fv(&vdata[tindices[i][1]][0]);
//	        glNormal3fv(&vdata[tindices[i][2]][0]);
//	        glVertex3fv(&vdata[tindices[i][2]][0]);
//	  }
	    GLfloat d1[3], d2[3], norm[3];
	    for (int j = 0; j < 3; j++) {
	       d1[j] = vdata[tindices[i][0]][j] - vdata[tindices[i][1]][j];
	       d2[j] = vdata[tindices[i][1]][j] - vdata[tindices[i][2]][j];
	    }
	    normcrossprod(d1, d2, norm);
	    glNormal3fv(norm);
	    for (i = 0; i < 20; i++) {
	       subdivide(&vdata[tindices[i][0]][0],
	                 &vdata[tindices[i][1]][0],
	                 &vdata[tindices[i][2]][0], 3);
	    }
	  glEnd();

}


void drawPolygon(int n =20 , int arg = 0, float mult = 1, float v = 1.0)
{
//if (arg < 0)
//    arg = 0;
//
// Cylinder Bottom
glBegin(GL_POLYGON);
    glColor4f(1.0, 0.0, 0.0, 1.0);
    for(int i = arg; i <= (360 + arg); i += (360 / n)) {
        float a = i * M_PI / 180; // degrees to radians
        glVertex3f(mult * cos(a), mult * sin(a), 0.0);
    }
glEnd();

// Cylinder Top
glBegin(GL_POLYGON);
    glColor4f(0.0, 0.0, 1.0, 1.0);
    for(int i = arg; i <= (360 + arg); i += (360 / n)) {
        float a = i * M_PI / 180; // degrees to radians
        glVertex3f(mult * cos(a), mult * sin(a), v);
    }
glEnd();

// Cylinder "Cover"
glBegin(GL_QUAD_STRIP);
    glColor4f(1.0, 1.0, 0.0, 1.0);
    for(int i = arg; i < 480; i += (360 / n)) {
        float a = i * M_PI / 180; // degrees to radians
        glVertex3f(mult * cos(a), mult * sin(a), 0.0);
        glVertex3f(mult * cos(a), mult * sin(a), v);
    }
glEnd();
}


void mouseCallBack(int btn, int state, int x, int y)
{
    // Changes the rotation axis depending on the mouse button pressed.
	cout << "here is mouseCallback" << endl;
    if ( state == GLUT_DOWN )
    {
        if( btn == GLUT_LEFT_BUTTON ) {cout << "here is left button pressed" << endl; axis = 0;}
        if( btn == GLUT_MIDDLE_BUTTON ) axis = 1;
        if( btn == GLUT_RIGHT_BUTTON) axis = 2;
    }
}


void motionCallBack(int x, int y)
{
    int movx, movy;

    movx = lastx - x;
    movy = lasty - y;

    if ( abs(movx) < 10 ){ rotate_speed += (float)(movx) / 50.0f; }
    if ( abs(movy) < 10 ){ scaling  += (float)(movy) / 100.0f;  }

    if ( scaling < 00.1f) scaling = 1.f;
    if ( scaling > 10.0f) scaling = 10.0f;

    lastx = x;
    lasty = y;



}

void draw_sphere()
{


}

void drawCylinder()
{
	float top = 3.0;
	float base = 3.0;
	float height = 30.0;
	float slices = 10.0;
	float stacks = 20.0;

	gluCylinder(gluNewQuadric(), base, top, height, slices, stacks);
}


void myInit(void)
{
  GLfloat light_ambient[] =
  {0.2, 0.2, 0.2, 1.0};
  GLfloat light_diffuse[] =
  {1.0, 1.0, 1.0, 1.0};
  GLfloat light_specular[] =
  {1.0, 1.0, 1.0, 1.0};
  GLfloat light_position[] =
  {1.0, 1.0, 1.0, 0.0};

  glLightfv(GL_LIGHT0, GL_AMBIENT, light_ambient);
  glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
  glLightfv(GL_LIGHT0, GL_SPECULAR, light_specular);
  glLightfv(GL_LIGHT0, GL_POSITION, light_position);

  glEnable(GL_LIGHT0);
  glDepthFunc(GL_LESS);
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_LIGHTING);

  glSelectBuffer(BUFSIZE, selectBuf);

  glNewList(VESSEL, GL_COMPILE);
  //glutSolidTorus(0.275, 0.85, 10, 15);
  drawCylinder();
  glEndList();

  glNewList(STOMACH, GL_COMPILE);
//  glutSolidTetrahedron();
  //glutSolidSphere(4.0, 16, 16);
//  drawPolygon();
  glEndList();

  glNewList(LIVER, GL_COMPILE);
  //glutSolidIcosahedron();
  glutSolidSphere(2.0, 16, 16);
  glEndList();

  glNewList(INSTRUMENT1, GL_COMPILE);
  //glutSolidIcosahedron();
  glutSolidCube(2.0);
  glEndList();

  glNewList(INSTRUMENT2, GL_COMPILE);
  //glutSolidIcosahedron();
  glutSolidCube(2.0);
  glEndList();


  glNewList(STOMACH_MESH, GL_COMPILE);
  //glutSolidIcosahedron();
  //drawIcosahedron();
  drawStomach();
  glEndList();

}
void init()
{
//	GLfloat mat_specular[] = {1.0, 1.0, 1.0, 1.0};
//	GLfloat mat_shininess[] = {50.0};
//
//	GLfloat light_ambient[] = {0.2, 0.2, 0.2, 1.0};
//	GLfloat light_diffuse[] = {1.0, 1.0, 1.0, 1.0};
//	GLfloat light_specular[] = {1.0, 1.0, 1.0, 1.0};
//	GLfloat light_position[] = {0.0, 0.0, 60.0, 1.0};
//	GLfloat spot_direction[] = {-1.0, -1.0, 0.0};
//
//	glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
//	glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
//
//	glLightfv (GL_LIGHT0, GL_AMBIENT, light_ambient);
//	glLightfv (GL_LIGHT0, GL_DIFFUSE, light_diffuse);
//	glLightfv (GL_LIGHT0, GL_SPECULAR, light_specular);
//
//	glLightfv (GL_LIGHT0, GL_POSITION, light_position);
//
//	glLightf(GL_LIGHT0, GL_CONSTANT_ATTENUATION, 2.0);
//	glLightf (GL_LIGHT0, GL_LINEAR_ATTENUATION, 1.0);
//	glLightf (GL_LIGHT0, GL_QUADRATIC_ATTENUATION, 0.5);
//
//	glLightf (GL_LIGHT0, GL_SPOT_CUTOFF, 45.0);
//	glLightfv (GL_LIGHT0, GL_SPOT_DIRECTION, spot_direction);
//	glLightf (GL_LIGHT0, GL_SPOT_EXPONENT, 2.0);
//
//
//	glShadeModel(GL_SMOOTH);
//	glEnable(GL_LIGHT0);
//	glEnable(GL_LIGHTING);

}
void main_loop()
{
	static double angle;

	GLdouble eqn[4] = {0.0, 1.0, 0.0, 0.0};
	GLdouble eqn2[4]={1.0, 0.0, 0.0, 0.0};


	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glClearColor(0,1,0,1);

	glColor3f(0.5,0.0,0.0);



	glLoadIdentity();
	/* light */

	gluLookAt(0.0-2*scaling,10.0,60.0+2 * scaling, 0.0, 0.0, 0.0, 0,1,0);

	glColor3f(0.5,0.5,0.0);
	glBegin(GL_LINES);
		glVertex3f(0,0,0);
		glVertex3f(30,0,0);
		glVertex3f(0,0,0);
		glVertex3f(0,30,0);
		glVertex3f(0,0,0);
		glVertex3f(0,0,30);
	glEnd();
/* vessels */
	glPushMatrix();
	glTranslatef(0,15,0);
//	glClipPlane(GL_CLIP_PLANE0, eqn);
//	glEnable(GL_CLIP_PLANE0);
	glRotatef(90, 1, 0, 0);
	drawCylinder();


	/* vessel label */
	char text[] = "Vessel - cylinder";

	float x = 0, y = 20, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);

	for(int i = 0; text[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[i]);

	glPopMatrix();

	/* organs */
	/* stomach */
	glPushMatrix();
	glTranslatef(5, -7, 15);
	glRotatef(45, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	glutWireSphere(4.0, 16, 16);

	/* stomach label */
	char text4[] = "stomach: ellipsoid";
	x = 5, y = -5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text4[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text4[i]);

	glPopMatrix();

	/* liver */
	glPushMatrix();
	glTranslatef(-10,0, 0);
	glRotatef(0, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	glutWireSphere(2.0, 16, 16);

	/* liver label */
	char text5[] = "liver: ellipsoid";
	x = -10, y = 5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text5[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text5[i]);

	glPopMatrix();

	// instruments

	/* instrument1 */
	glPushMatrix();
	glTranslatef(-10, -10, 10);
	glRotatef(45, 1, 1, 1.0);
	glScalef(3.0, 1.0, 1.0);
	glutWireCube(2.0);

	/* instrument1 label */
	char text2[] = "instrument1-stick";
	x = 10, y = 10, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text2[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text2[i]);

	glPopMatrix();

	/* instrument2 */
	glPushMatrix();
	glTranslatef(10,10, 5);
	glRotatef(30, 1,1, 1.0);
	glScalef(2.0, 1.0, 1.0);
	glutWireCube(2.0);

	/* instrument2 label */
	char text3[] = "instrument2 - stick";
	x = -20, y = -15, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text3[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text3[i]);

	glPopMatrix();


//	glBegin(GL_QUADS);
//
//	glEnd();
	glutSwapBuffers();
	angle += 0.1;
}

void GL_Setup(int a, int b)
{
	glViewport(0,0, a, b);
	glMatrixMode(GL_PROJECTION);
	glEnable(GL_DEPTH_TEST);
	gluPerspective(45, (float)a/b, 1.1, 200);
	glMatrixMode(GL_MODELVIEW);
}

void polygon_mode(int value)
{
  switch (value) {
  case 1:
    glEnable(GL_LIGHTING);
    glDisable(GL_BLEND);
    glEnable(GL_DEPTH_TEST);
    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    break;
  case 2:
    glDisable(GL_LIGHTING);
    glColor3f(1.0, 1.0, 1.0);
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
    glEnable(GL_LINE_SMOOTH);
    glEnable(GL_BLEND);
    glDisable(GL_DEPTH_TEST);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    break;
  }
  glutPostRedisplay();
}



void highlightBegin(void)
{
  static GLfloat red[4] =
  {1.0, 0.0, 0.0, 1.0};

  glPushAttrib(GL_LIGHTING_BIT | GL_CURRENT_BIT);
  glMaterialfv(GL_FRONT, GL_DIFFUSE, red);
  glColor3f(1.0, 0.0, 0.0);
}

void highlightEnd(void)
{
	glPopAttrib();
}

void draw_front(void)
{

	glPushMatrix();
	//	glRotatef(20.0, 1.0, 0.0, 0.0);
	gluLookAt(0.0+shift, 0.0, 60.0+scaling, -34.7744, 128.725, -69.7196, 0,1,0);
//	glScalef(1.3, 1.3, 1.3);

	////////////////
	// vessel
	///////////////
	glLoadName(1);
	glPushMatrix();
	if (theObject == 1)
		highlightBegin();

	glTranslatef(0,15,0);
//	//  if (!menu_inuse) {
//		if (axis == 0) {
		  if (theObject == 1) {
//			theObject = 1;
//	//		glRotatef(90, 0, 1, 0);
			glRotatef((pow(rotate_speed,2)+pow(scaling,2)), rotate_speed, scaling, 0);
//	//		glutPostRedisplay();
		  }
//		  axis = 2;
//		}
//	//  }
	glRotatef(90, 1, 0, 0);


//	if(menu_inuse)
//	{
//		glPushMatrix();
//		glRotatef(sqrt(pow(rotate_speed,2)+pow(scaling,2)), rotate_speed, scaling, 0);
//		glPopMatrix();
//	}
	glCallList(VESSEL);
	/* vessel label */
	char text[] = "Vessel - cylinder";
	float x = 0, y = 20, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[i]);


	/* vessel label from srsml */
	string str_text;
	str_text = str_elements + str_elements2;
	x = 0, y = 22, z = 0;
	// The color, red for me
	glColor3f(0, 1, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);

	for(int i = 0; str_text[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, str_text[i]);


	if (theObject == 1)
		highlightEnd();
	glPopMatrix();

	//////////////
	// Stomach
	/////////////
	glLoadName(STOMACH);
	glPushMatrix();
	if (theObject == 2)
		highlightBegin();
	glTranslatef(5, -7, 15);
	//  if (!menu_inuse) {
//		if (mouse_state == GLUT_LEFT) {
		  if (theObject == 2) {
//			theObject = 2;
//			glRotatef(90, 0, 1, 0);
			glRotatef((pow(rotate_speed,2)+pow(scaling,2)), rotate_speed, scaling, 0);
	//		glutPostRedisplay();
		  }
//		}
	//  }
	glRotatef(45, 0, 0, 1.0);
//	glTranslatef(34.7744, -128.725, 69.7196);
	glScalef(6.0, 3.0, 3.0);
	/* stomach label */
	char text4[] = "stomach: ellipsoid";
	x = 5, y = -5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text4[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text4[i]);

	glCallList(STOMACH);
	if (theObject == 2)
		highlightEnd();
	glPopMatrix();

	/////////////////////
	// Liver
	////////////////////
	glLoadName(3);
	glPushMatrix();
	if (theObject == 3)
		highlightBegin();
	glTranslatef(-10,0, 0);
	glRotatef(0, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	/* liver label */
	char text5[] = "liver: ellipsoid";
	x = -10, y = 5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text5[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text5[i]);

	glCallList(LIVER);
	if (theObject == 3)
		highlightEnd();
	glPopMatrix();

	////////////////
	// Instrument 1
	////////////////
	glLoadName(4);
	glPushMatrix();
	if (theObject == 4)
		highlightBegin();
	glTranslatef(-10, -10, 10);
	glRotatef(45, 1, 1, 1.0);
	glScalef(3.0, 1.0, 1.0);
	/* instrument1 label */
	char text2[] = "instrument1-stick";
	x = 10, y = 10, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text2[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text2[i]);

	glCallList(INSTRUMENT1);
	if (theObject == 4)
		highlightEnd();
	glPopMatrix();



	////////////////
	// Instrument 2
	///////////////
	glLoadName(5);
	glPushMatrix();
	if (theObject == 5)
		highlightBegin();
	glTranslatef(10,10, 5);
	glRotatef(30, 1,1, 1.0);
	glScalef(2.0, 1.0, 1.0);

	/* instrument2 label */
	char text3[] = "instrument2 - stick";
	x = -20, y = -15, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text3[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text3[i]);

	glCallList(INSTRUMENT2);
	if (theObject == 5)
		highlightEnd();
	glPopMatrix();

	glPopMatrix();

	//////////////
	// Stomach Mesh
	/////////////
	glLoadName(STOMACH_MESH);
	glPushMatrix();
	if (theObject == 6)
		highlightBegin();
//	glTranslatef(5, -7, 15);
	//  if (!menu_inuse) {
//		if (mouse_state == GLUT_LEFT) {
		  if (theObject == 6) {
//			theObject = 2;
//			glRotatef(90, 0, 1, 0);
//			glRotatef((pow(rotate_speed,2)+pow(scaling,2)), rotate_speed, scaling, 0);
	//		glutPostRedisplay();
		  }
//		}
	//  }
//	glRotatef(45, 0, 0, 1.0);
//	glTranslatef(34.7744, -128.725, 69.7196);
//	glScalef(6.0, 3.0, 3.0);
	/* stomach label */
	char text6[] = "stomach: mesh";
	x = 5, y = -5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text6[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text6[i]);

	glCallList(STOMACH_MESH);
	if (theObject == 6)
		highlightEnd();
	glPopMatrix();


}
void draw_half_left(void)
{

	glPushMatrix();
	gluLookAt(5.0, 0.0, 5.0, 0.0, 0.0,0.0, 0,1,0);
//	glScalef(1.3, 1.3, 1.3);
//	glRotatef(20.0, 1.0, 0.0, 0.0);
	////////////////
	// vessel
	///////////////
	glLoadName(1);
	glPushMatrix();
	if (theObject == 1)
		highlightBegin();

	glTranslatef(0,15,0);
	glRotatef(90, 1, 0, 0);
	glCallList(VESSEL);
	/* vessel label */
	char text[] = "Vessel - cylinder";
	float x = 0, y = 20, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[i]);
	if (theObject == 1)
		highlightEnd();
	glPopMatrix();

	//////////////
	// Stomach
	/////////////
	glLoadName(2);
	glPushMatrix();
	if (theObject == 2)
		highlightBegin();
	glTranslatef(5, -7, 15);
	glRotatef(45, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	/* stomach label */
	char text4[] = "stomach: ellipsoid";
	x = 5, y = -5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text4[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text4[i]);

	glCallList(STOMACH);
	if (theObject == 2)
		highlightEnd();
	glPopMatrix();

	/////////////////////
	// Liver
	////////////////////
	glLoadName(3);
	glPushMatrix();
	if (theObject == 3)
		highlightBegin();
	glTranslatef(-10,0, 0);
	glRotatef(0, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	/* liver label */
	char text5[] = "liver: ellipsoid";
	x = -10, y = 5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text5[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text5[i]);

	glCallList(LIVER);
	if (theObject == 3)
		highlightEnd();
	glPopMatrix();

	////////////////
	// Instrument 1
	////////////////
	glLoadName(4);
	glPushMatrix();
	if (theObject == 4)
		highlightBegin();
	glTranslatef(-10, -10, 10);
	glRotatef(45, 1, 1, 1.0);
	glScalef(3.0, 1.0, 1.0);
	/* instrument1 label */
	char text2[] = "instrument1-stick";
	x = 10, y = 10, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text2[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text2[i]);

	glCallList(INSTRUMENT1);
	if (theObject == 4)
		highlightEnd();
	glPopMatrix();



	////////////////
	// Instrument 2
	///////////////
	glLoadName(5);
	glPushMatrix();
	if (theObject == 5)
		highlightBegin();
	glTranslatef(10,10, 5);
	glRotatef(30, 1,1, 1.0);
	glScalef(2.0, 1.0, 1.0);

	/* instrument2 label */
	char text3[] = "instrument2 - stick";
	x = -20, y = -15, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text3[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text3[i]);

	glCallList(INSTRUMENT2);
	if (theObject == 5)
		highlightEnd();
	glPopMatrix();

	glPopMatrix();



}
void draw_half_right(void)
{

	glPushMatrix();
	gluLookAt(-5.0, 0.0, 5.0, 0.0, 0.0,0.0, 0,1,0);
//	glScalef(1.3, 1.3, 1.3);
//	glRotatef(20.0, 1.0, 0.0, 0.0);
	////////////////
	// vessel
	///////////////
	glLoadName(1);
	glPushMatrix();
	if (theObject == 1)
		highlightBegin();

	glTranslatef(0,15,0);
	glRotatef(90, 1, 0, 0);
	glCallList(VESSEL);
	/* vessel label */
	char text[] = "Vessel - cylinder";
	float x = 0, y = 20, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text[i]);
	if (theObject == 1)
		highlightEnd();
	glPopMatrix();

	//////////////
	// Stomach
	/////////////
	glLoadName(2);
	glPushMatrix();
	if (theObject == 2)
		highlightBegin();
	glTranslatef(5, -7, 15);
	glRotatef(45, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	/* stomach label */
	char text4[] = "stomach: ellipsoid";
	x = 5, y = -5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text4[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text4[i]);

	glCallList(STOMACH);
	if (theObject == 2)
		highlightEnd();
	glPopMatrix();

	/////////////////////
	// Liver
	////////////////////
	glLoadName(3);
	glPushMatrix();
	if (theObject == 3)
		highlightBegin();
	glTranslatef(-10,0, 0);
	glRotatef(0, 0, 0, 1.0);
	glScalef(2.0, 1.0, 1.0);
	/* liver label */
	char text5[] = "liver: ellipsoid";
	x = -10, y = 5, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text5[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text5[i]);

	glCallList(LIVER);
	if (theObject == 3)
		highlightEnd();
	glPopMatrix();

	////////////////
	// Instrument 1
	////////////////
	glLoadName(4);
	glPushMatrix();
	if (theObject == 4)
		highlightBegin();
	glTranslatef(-10, -10, 10);
	glRotatef(45, 1, 1, 1.0);
	glScalef(3.0, 1.0, 1.0);
	/* instrument1 label */
	char text2[] = "instrument1-stick";
	x = 10, y = 10, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text2[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text2[i]);

	glCallList(INSTRUMENT1);
	if (theObject == 4)
		highlightEnd();
	glPopMatrix();



	////////////////
	// Instrument 2
	///////////////
	glLoadName(5);
	glPushMatrix();
	if (theObject == 5)
		highlightBegin();
	glTranslatef(10,10, 5);
	glRotatef(30, 1,1, 1.0);
	glScalef(2.0, 1.0, 1.0);

	/* instrument2 label */
	char text3[] = "instrument2 - stick";
	x = -20, y = -15, z = 0;
	// The color, red for me
	glColor3f(1, 0, 0);
	// Position of the text to be printer
	glRasterPos3f(x, y, z);
	for(int i = 0; text3[i] != '\0'; i++)
		glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, text3[i]);

	glCallList(INSTRUMENT2);
	if (theObject == 5)
		highlightEnd();
	glPopMatrix();

	glPopMatrix();



}

GLdouble SCALE = 50;

void myortho(void)
{

  if (W <= H)
    glOrtho(-SCALE, SCALE, SCALE * (GLfloat) H / (GLfloat) W,
    		-SCALE * (GLfloat) H / (GLfloat) W, -SCALE, SCALE);
  else
    glOrtho(-1*SCALE * (GLfloat) W / (GLfloat) H,
    		SCALE * (GLfloat) W / (GLfloat) H, -1*SCALE, SCALE, -1*SCALE, SCALE);
}

void mypers(void)
{
	gluPerspective(45, (float)W/H, 1.1, 400);
}
/*  processHits() prints out the contents of the
 *  selection array.
 */
void processHits(GLint hits, GLuint buffer[])
{
  GLuint depth = ~0;
  unsigned int i, getThisName;
  GLuint names, *ptr;
  GLuint newObject;

  ptr = (GLuint *) buffer;
  newObject = 0;
  for (i = 0; i < hits; i++) {  /* for each hit  */
    getThisName = 0;
    names = *ptr;
    ptr++;              /* skip # name */
    if (*ptr <= depth) {
      depth = *ptr;
      getThisName = 1;
    }
    ptr++;              /* skip z1 */
    if (*ptr <= depth) {
      depth = *ptr;
      getThisName = 1;
    }
    ptr++;              /* skip z2 */

    if (getThisName)
      newObject = *ptr;
    ptr += names;       /* skip the names list */
  }
  if (theObject != newObject) {
    theObject = newObject;
    glutPostRedisplay();
  }
}

void output(GLfloat x, GLfloat y, char *format,...)
{
  va_list args;
  char buffer[200], *p;

  va_start(args, format);
  vsprintf(buffer, format, args);
  va_end(args);
  glPushMatrix();
  glTranslatef(x, y, 0);
  for (p = buffer; *p; p++)
    glutStrokeCharacter(GLUT_STROKE_ROMAN, *p);
  glPopMatrix();
}


void display(void)
{
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  draw_front();

  glPushAttrib(GL_ENABLE_BIT);
  glDisable(GL_DEPTH_TEST);
  glDisable(GL_LIGHTING);
  glDisable(GL_LINE_SMOOTH);

  glMatrixMode(GL_PROJECTION);
  glPushMatrix();
  glLoadIdentity();
  gluOrtho2D(0, 3000, 0, 3000);

  glMatrixMode(GL_MODELVIEW);
  glPushMatrix();
  glLoadIdentity();
//  gluLookAt(0.0-2*scaling,10.0,60.0+2 * scaling, 0.0, 0.0, 0.0, 0,1,0);

  output(80, 2800, "Automatically names object under mouse.");
  output(80, 100, "Located: %s.", objectNames[theObject]);
  output(80, 200, "First Model: %s\n",(char*) elements);

//  output(80, 200, "First Model: %s", (const char*) (((root_node)->first_node("models"))->first_attribute("name"))->value());
//  output(80, 200, "First Model: %s", (const char*) (((root_node->last_node())->last_node())->first_attribute("name"))->value());
//  output(80, 200, "First Model: %s.", (const char*) root_node->first_node("Brewery")->first_node("Beer")->first_attribute("name")->value());
  glPopMatrix();

  glMatrixMode(GL_PROJECTION);
  glPopMatrix();

  glMatrixMode(GL_MODELVIEW);
  glPopAttrib();

  glutSwapBuffers();
}


/* ARGS USED */
void locate(int value)
{
  GLint viewport[4];
  GLint hits;

  if (locating) {
    if (mouse_state == GLUT_ENTERED) {
      (void) glRenderMode(GL_SELECT);
      glInitNames();
      glPushName(-1);

      glMatrixMode(GL_PROJECTION);
      glPushMatrix();
      glLoadIdentity();
      viewport[0] = 0;
      viewport[1] = 0;
      viewport[2] = W;
      viewport[3] = H;
      gluPickMatrix(x, H - y, 5.0, 5.0, viewport);
      myortho(); // this is different from locate_pers

      glMatrixMode(GL_MODELVIEW);
      draw_front();
      glMatrixMode(GL_PROJECTION);
      glPopMatrix();
      glMatrixMode(GL_MODELVIEW);
      hits = glRenderMode(GL_RENDER);
    } else {
      hits = 0;
    }
    processHits(hits, selectBuf);
  }
  locating = 0;
}

/* ARGSUSED */
void locate_pers(int value)
{
  GLint viewport[4];
  GLint hits;

  if (locating) {
    if (mouse_state == GLUT_ENTERED) {
      (void) glRenderMode(GL_SELECT);
      glInitNames();
      glPushName(-1);

      glMatrixMode(GL_PROJECTION);
      glPushMatrix();
      glLoadIdentity();
      viewport[0] = 0;
      viewport[1] = 0;
      viewport[2] = W;
      viewport[3] = H;
      gluPickMatrix(x, H - y, 5.0, 5.0, viewport);
      mypers(); // this is different from locate

      glMatrixMode(GL_MODELVIEW);
      draw_front();
      glMatrixMode(GL_PROJECTION);
      glPopMatrix();
      glMatrixMode(GL_MODELVIEW);
      hits = glRenderMode(GL_RENDER);
    } else {
      hits = 0;
    }
    processHits(hits, selectBuf);
  }
  locating = 0;
}

/* passive function for perspective view */
void passive_pers(int newx, int newy)
{
  x = newx;
  y = newy;
  if (!locating) {
    locating = 1;
    glutTimerFunc(1, locate_pers, 0);
  }
}
/* passive function for orthographic view */
void passive(int newx, int newy)
{
  x = newx;
  y = newy;
  if (!locating) {
    locating = 1;
    glutTimerFunc(1, locate, 0);
  }
}

void entry(int state)
{
  mouse_state = state;
  if (!menu_inuse) {
    if (state == GLUT_LEFT) {
      if (theObject != 0) {
        theObject = 0;
        glutPostRedisplay();
      }
    }
  }
}

void main_menu(int value)
{
  if (value == 999)
    exit(0);
}

void mstatus(int status, int newx, int newy)
{
  if (status == GLUT_MENU_NOT_IN_USE) {
    menu_inuse = 0;
    passive(newx, newy);
  } else {
    menu_inuse = 1;
  }
}

void myReshape(int w, int h)
{
  W = w;
  H = h;
  glViewport(0, 0, W, H);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  //myortho();
  glMatrixMode(GL_MODELVIEW);
}

void idle()
{
	glutPostRedisplay();
}


void keyboard(int key, int x, int y)
{
	switch(key)
	{
	case GLUT_KEY_UP:
	//do something here
		scaling -= 1.0f;
		output(80, 150, "Up Arrow:");

	break;
	case GLUT_KEY_DOWN:
		scaling += 1.0f;
	break;
	case GLUT_KEY_LEFT:
		shift -= 1.0f;
	break;
	case GLUT_KEY_RIGHT:
		shift += 1.0f;
	break;
	}
	glutPostRedisplay();
}

void loadSRSML()
{

	cout << "parsing srsml..." << endl;


	// Read the xml file into a vector
	ifstream theFile ("gastrectomy.xml");
	vector<char> buffer((istreambuf_iterator<char>(theFile)), istreambuf_iterator<char>());
	buffer.push_back('\0');
	// Parse the buffer using the xml file parsing library into doc
	doc.parse<0>(&buffer[0]);
	// Find our root node
	cout << "parsing a root element" << endl;
	root_node = doc.first_node("srsml");

	int size = strlen((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("name"))->value());
	int size2 = strlen((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("type"))->value());

	// variables for malloc
	elements=(char*) malloc(size+1);
	elements2=(char*) malloc(size2+1);

	strcpy ((char*)elements,(char*)((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("name"))->value()));
	strcpy ((char*)elements2,(char*)((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("type"))->value()));

	// variables for string
	str_elements.assign((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("name"))->value());
	str_elements2.assign((((root_node->first_node("models"))->first_node("vessels"))->first_attribute("type"))->value());

	// Iterate over the vessels
	if (root_node){
		cout << "if there is a root element" << endl;
		for (xml_node<> * models_node = root_node->first_node("models"); models_node!=NULL; models_node = models_node->next_sibling())
		{
			cout << "here is in the model for loop" << endl;
			for (xml_node<> * vessels_node = models_node->first_node("vessels"); vessels_node!=NULL; vessels_node = vessels_node->next_sibling())
			{
				cout << "here is in the vessels for loop" << endl;
				printf("I have visited in. ");//,
					// Interate over the beers
				cout << "here is before the inner for loop" << endl;
				for(xml_node<> * vessel_node = vessels_node->first_node("vessel"); vessel_node; vessel_node = vessel_node->next_sibling())
				{
					printf("On, I tried their %s which is a %s. ",
							vessel_node->first_attribute("name")->value(),
							vessel_node->first_attribute("type")->value());
				}
				cout << endl;
			}
		}
	}
}

void loadXML()
{

	cout << "Parsing my beer journal..." << endl;


	// Read the xml file into a vector
	cout << "before loading a xml file" << endl;
	ifstream theFile ("beerJournal.xml");
	cout << "after loading a xml file" << endl;
	vector<char> buffer((istreambuf_iterator<char>(theFile)), istreambuf_iterator<char>());
	buffer.push_back('\0');
	// Parse the buffer using the xml file parsing library into doc
	doc.parse<0>(&buffer[0]);
	// Find our root node
	cout << "before parsing a root element" << endl;
	root_node = doc.first_node("MyBeerJournal");
	// Iterate over the brewerys
//	elements = "sldfjlsdjfldsjfldsjflsdjflds";
	elements=(char*) malloc(strlen(((((root_node)->first_node("Brewery"))->first_attribute("name"))->value()))+1);

	strcpy ((char*)elements,(char*)(((root_node)->first_node("Brewery"))->first_attribute("name"))->value());
	elements[strlen(((((root_node)->first_node("Brewery"))->first_attribute("name"))->value()))]='\0';
//	elements = "char";
	printf("here is element:%s\n",elements);
	cout << "after parsing a root element" << endl;
	if (root_node){
		cout << "if there is a root element" << endl;
		for (xml_node<> * brewery_node = root_node->first_node("Brewery"); brewery_node!=NULL; brewery_node = brewery_node->next_sibling())
		{
			cout << "here is in the for loop" << endl;
			printf("I have visited %s in %s. ",
				brewery_node->first_attribute("name")->value(),
				brewery_node->first_attribute("location")->value());
				// Interate over the beers
			cout << "here is before the inner for loop" << endl;
			for(xml_node<> * beer_node = brewery_node->first_node("Beer"); beer_node; beer_node = beer_node->next_sibling())
			{
				printf("On %s, I tried their %s which is a %s. ",
					beer_node->first_attribute("dateSampled")->value(),
					beer_node->first_attribute("name")->value(),
					beer_node->first_attribute("description")->value());
				printf("I gave it the following review: %s", beer_node->value());
			}
			cout << endl;
		}
	}
}

int main(int argc, char ** argv)
{

	int submenu;

    glutInit(&argc, argv);
    glutInitWindowSize(window_width, window_height); //set a window size
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE|GLUT_DEPTH);
    glutCreateWindow("SRS Viewer!!");
//    init();

//    loadXML();
    loadSRSML();
    myInit();

    glutDisplayFunc(display);
    //glutReshapeFunc(myReshape);
    glutReshapeFunc(GL_Setup);
    glutIdleFunc(idle);

//    glutIdleFunc(main_loop);

    glutMouseFunc(mouseCallBack);
    glutMotionFunc(motionCallBack);


    /* sub menu */
    submenu = glutCreateMenu(polygon_mode);
    glutAddMenuEntry("Filled", 1);
    glutAddMenuEntry("Wireframe", 2);

    /* main menu */
    glutCreateMenu(main_menu);
    glutAddSubMenu("Polygon mode", submenu);
    glutAddMenuEntry("Quit", 999);

    /* how to attach main menu */
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutPassiveMotionFunc(passive_pers);
    glutEntryFunc(entry);
    glutMenuStatusFunc(mstatus);

//    GL_Setup(window_width, window_height);
    glutSpecialFunc(keyboard);

    glutMainLoop();

    free(elements);
    free(elements2);

    return 0;

}
